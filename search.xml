<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android基本控件</title>
    <url>/2021/01/11/Android%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="RadioGroup"><a href="#RadioGroup" class="headerlink" title="RadioGroup"></a>RadioGroup</h2><p>​       RdioGroup是单选组合框，可以容纳多个RadioButton的一个容器。在没有RadioGroup的情况下，RadioButton可以全部被选中；当多个RadioButton被RadioGroup包含的情况下，RadioButton只可以选择一个，从而达到了单选的目的。</p>
<span id="more"></span>

<p><em>RadioGroup相关方法</em></p>
<p>​       1.RadioGroup.getCheckedRadioButtonId();</p>
<p>　　　　该方法可以获取选中的按钮</p>
<p>　　2.RadioGroup.clearCheck();</p>
<p>　　　　该方法可以清除选中状态</p>
<p>　　3.setOnCheckedChangeLintener(RadioGroup.OnCheckedChangeListener listener);</p>
<p>　　　　当一个单选按钮组中的单选按钮选中状态发生改变的时候调用的回调方法</p>
<p>　　4.RadioGroup.check(int id);</p>
<p>　　　　该方法可以通过传入ID来设置该选项为选中状态</p>
<p>　　5.addView(View child,int index, ViewGroup.LayoutParams params);</p>
<p>　　　　使用指定布局参数添加一个字视图（其中child是要添加的子视图，index是将要添加子视图的位置，params 所要添加的子视图的布局参数）</p>
<p>　　6.RadioButton.getText();</p>
<p>　　　　获取单选框的值</p>
<p><em>RadioGroup与RadioButton的关系</em></p>
<p>​         1.RadioButton表示单个原型单选框，而RadioGroup是可以容纳多个RadioButton的容器</p>
<p>　　  2.每个RadioGroup中的RadioButton同时只能有一个被选中</p>
<p>　　  3.不同的RadioGroup中的RadioButton互不相干，即如果组A中有一个选中了，那么组B中依然可以有一个被选中。</p>
<p>　　  4.在大部分场合下，一个RadioGroup中至少有两个RadioButton</p>
<p>　　  5.在大部分场合下，一个RadioGroup中的RadioButton默认会有一个被选中，并建议您将它放在RadioGroup的起始位置</p>
<p><img src="/../images/Android%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6/radiogroup.gif"></p>
<p>​          (下面的三个按钮总体为一个RadioGroup,单独一个按钮为RadioButton)</p>
<h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><p>​       个人理解selector主要用于按钮的状态变化，如按钮按下后会变色，即两种不同的按钮状态的实现。</p>
<p>​       对于按钮图标的更换只需要调用一个selector文件并将按下后与按下前的图标分别对应即可:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:drawableTop=&quot;@drawable/rb_common_frame_drawble_selector&quot;</span><br></pre></td></tr></table></figure>

<p>​      语句后面的内容即引用了selector，注意是在drawable目录下</p>
<p>​       但是对于文字的变色处理，则不能在drawable目录下进行调用，需要在color目录下进行调用，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:textColor=&quot;@color/rb_textcolor_selector&quot;</span><br></pre></td></tr></table></figure>

<p>对于网上所介绍的利用插件selector chapek，在drawble目录下放下两张以_normar,_pressed为后缀的图片，然后可以右键drawable目录直接调用selector，暂时未能成功。</p>
<h2 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h2><p>​       Bundle是用来传递数据的“容器”，它保存的数据，是以key-value(键值对)的形式存在的。<br>我们经常使用Bundle在Activity之间传递数据，传递的数据可以是boolean、byte、int、long、float、double、string等基本类型或它们对应的数组，也可以是对象或对象数组。当Bundle传递的是对象或对象数组时，必须实现Serializable 或Parcelable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个Bundle类</span></span><br><span class="line">Bundle mBundle = <span class="keyword">new</span> Bundle();   </span><br><span class="line"><span class="comment">//bundle类中加入数据（key -value的形式，另一个activity里面取数据的时候，就要用到key，找出对应的value）</span></span><br><span class="line">mBundle.putString(<span class="string">&quot;Data&quot;</span>, <span class="string">&quot;data from TestBundle&quot;</span>);  </span><br><span class="line"><span class="comment">//新建一个intent对象，并将该bundle加入这个intent对象</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();    </span><br><span class="line">intent.setClass(TestBundle.<span class="keyword">this</span>, Target.class);    </span><br><span class="line">intent.putExtras(mBundle);  </span><br></pre></td></tr></table></figure>



<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>1.关于Fragment的切换</p>
<p>​          Fragment的切换主要有两种方式:</p>
<p>​               replace();但是replace()方法会在每次切换的时候Fragment都会重新实例化，重新加载一次数据，对于用户的流量造成无端浪费，据官方文档解释，replace()方法仅适用于上一个Fragment不再需要时采用的办法。</p>
<p>​              另一种办法是add()，切换时show()与hide()结合使用，当切换Fragment时将当前的fragment  hide()，add()另一个fragment，再次切换时，只需要hide()当前的，show()另一个。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android相对布局</title>
    <url>/2021/01/16/Android%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h2><p>​       线性布局顾名思义主要用于布局分配情况为水平或者竖直的情况,在此基础上对各控件进行位置的设定,同时只有LinearLayout才有权重(weight),可以等比例大小设定控件。</p>
<span id="more"></span>

<h2 id="RelativeLayout相对布局"><a href="#RelativeLayout相对布局" class="headerlink" title="RelativeLayout相对布局"></a>RelativeLayout相对布局</h2><p>​        相对布局显得更加随意，对于各控件的位置属性也很多，可以将控件设定在任意位置上。</p>
<h2 id="FrameLayout帧布局"><a href="#FrameLayout帧布局" class="headerlink" title="FrameLayout帧布局"></a>FrameLayout帧布局</h2><p>​       帧布局的应用场景较少，所有的控件都会默认摆放在布局的左上角，对于各控件的位置设定也较少。</p>
<h2 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h2><p>​       百分比布局为一种新增的布局，只为FrameLayout和RelativeLayout进行了功能扩展，提供了PercentFrameLayout和PercentRelativeLayout两个全新的布局。</p>
<p>​      利用app:layout_widthPercent和app:layou_heightPercent来指定宽高</p>
<p>​     </p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习日志</title>
    <url>/2021/09/10/JSP%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="第一节-HTML"><a href="#第一节-HTML" class="headerlink" title="第一节 HTML"></a>第一节 HTML</h2><p>HTML（Hyper Text Markup Language）：超文本标记语言</p>
<span id="more"></span>

<h3 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h3><ul>
<li>结构化标准语言：HTML、XML</li>
<li>表现标准语言：CSS</li>
<li>行为标准语言：DOM、ECMAScript</li>
</ul>
<h3 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    网页头部</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	主体部分</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>&lt;!- -注释- - &gt;</p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a><meta>标签</h3><ul>
<li><p>描述性标签，用来描述网站的一些相关信息</p>
</li>
<li><p>用来做SEO（搜索引擎优化）</p>
</li>
</ul>
<h3 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快 跑得快<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按住Tab可快捷生成标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line">跑得快 跑得快 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">两只老虎 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">p按住Tab键快捷 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--粗体，斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>粗体  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>变粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>斜体 <span class="tag">&lt;<span class="name">em</span>&gt;</span>变斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空格： 空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span>   &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>   &lt;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>版权</span><br></pre></td></tr></table></figure>

<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">“../resources/image/1.jpg(图片地址）</span>&quot; <span class="attr">alt</span> = <span class="string">“图片名称</span>&quot; <span class="attr">title</span> =</span></span><br><span class="line"><span class="tag">        <span class="string">“MizuGo</span>&quot; <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>src 图片路径地址  ../  代表上一级地址 </p>
<p>alt 图片名称；往往用于备注说明，当图片加载未成功时显示</p>
<p>title 悬停图片上所显示的文字</p>
<h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p><a>标签</a></p>
<p>href:表示要跳转到的页面（必填）</p>
<p>target:表示页面要打开的位置</p>
<p>​    _blank:表示在新标签页打开</p>
<p>​    _self：表示在当前标签页打开（默认）_</p>
<!--文字链接形式-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http:\\\www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!--图片链接形式-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span>&gt;</span>`</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><ol>
<li>需要一个标记</li>
<li>跳转到该标记</li>
</ol>
<!--用name属性作标记-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!--用#+name跳转到对应的标记-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tag&quot;</span>&gt;</span>回到标记处<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h4><!--邮件链接-->

<p>mailto</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:406587247@qq.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!--QQ链接-->

<p>QQ推广中获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=406587247&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=2:406587247:53&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;你好加我好友&quot;</span> <span class="attr">title</span>=<span class="string">&quot;你好加我好友&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><!--有序列表-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果图如下：</p>
<ol>
    <li>Java</li>
    <li>C++</li>
    <li>Python</li>
</ol>

<!--无序列表-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<ul>
    <li>Java</li>
    <li>C++</li>
    <li>Python</li>
</ul>
<!--自定义列表-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dl：标签</span></span><br><span class="line"><span class="comment">dt:列表名称</span></span><br><span class="line"><span class="comment">dd:列表内容</span></span><br><span class="line"><span class="comment">多用于网站底部内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>语言<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>程度<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<dl>
    <dt>语言</dt>
    <dd>Java</dd>
    <dd>C++</dd>
    <dd>Python</dd>
    <dt>程度</dt>
    <dd>1</dd>
    <dd>2</dd>
    <dd>3</dd>
</dl>
### 表格

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--tr:行</span></span><br><span class="line"><span class="comment">td:列</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--border 边框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--rowspan 跨行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> &gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<table border="1px">
    <tr>
        <td cospan="2">1-1</td>
         <td>1-2</td>
        <td>1-3</td>
    </tr>
    <tr>
        <td rowpan="2">2-1</td>
         <td>2-2</td>
        <td>2-3</td>
    </tr>
    <tr>
        <td>3-1</td>
         <td>3-2</td>
        <td>3-3</td>
    </tr>
</table>
### 媒体元素

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--src：资源路径</span></span><br><span class="line"><span class="comment">controls：控制条（无此项会导致资源不显示）</span></span><br><span class="line"><span class="comment">autoplay：自动播放--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视频元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/1.mp4 controls autoplay&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--音频元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/2.mp3 controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<!--视频元素-->



<p>效果图如下：</p>
<p><video src="../video/1.mp4" width="300px" height="600px"></video></p>
<!--音频元素-->

<p>效果图如下：</p>
<p><audio src="../video/2.mp3"></audio></p>
<h3 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--header：头部</span></span><br><span class="line"><span class="comment">section：主体</span></span><br><span class="line"><span class="comment">footer：脚部</span></span><br><span class="line"><span class="comment">nav：导航类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--iframe：内联框架</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">src:路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name:内联框架名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">width：宽</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">height：高--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入其他网页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.bilibili.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<iframe src="https://www.bilibili.com" frameborder="0" width="400px" height="300px"></iframe>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--b站视频导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=632543773&amp;bvid=BV1qb4y1S7p4&amp;cid=396396792&amp;page=1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span><span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<iframe src="//player.bilibili.com/player.html?aid=632543773&bvid=BV1qb4y1S7p4&cid=396396792&page=1" width="400px" height="300px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--利用超链接导入自己的网页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.MyFirstWeb.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可实现在内联框架中打开自己的网页</p>
<h3 id="表单post和get的提交"><a href="#表单post和get的提交" class="headerlink" title="表单post和get的提交"></a>表单post和get的提交</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">name：表单名（必填）</span></span><br><span class="line"><span class="comment">action：表单提交的位置，可以为网站，也可以是请求处理的地址</span></span><br><span class="line"><span class="comment">methon：表单提交方式（post、get）</span></span><br><span class="line"><span class="comment">get方式提交：可以在url中看到提交的信息，不安全</span></span><br><span class="line"><span class="comment">post方式提交：比较安全，可以提交大文件</span></span><br><span class="line"><span class="comment">value:默认值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">methon</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>注册：</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">value</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：理论上来说点击提交会跳转到百度</p>
<form action="www.baidu.com" methon="post">
    <p>注册：
<br>
        用户名<input type="text" name="用户名" value="username">
        密码<input type="password" name="密码" value="password">
    </p>    
</form>



<p>
    <input type="submit">
    <input type="reset" value="清空">
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">value:单选框的值</span></span><br><span class="line"><span class="comment">需要让同一组的name相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>
    <input type="radio" value="boy" name="sex">男
    <input type="radio" value="girl" name="sex">女
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;checkbox&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>打游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>看书</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>爱好：
  <input type="checkbox" value="a" name="hobby">睡觉
    <input type="checkbox" value="b" name="hobby">打游戏
    <input type="checkbox" value="C" name="hobby">看书    
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--button按钮</span></span><br><span class="line"><span class="comment">image图像</span></span><br><span class="line"><span class="comment">value：按钮所显示的文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变长&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../source/images/JSP学习日志/1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>
    <input type="button" name="btn1" value="变长">
    <input type="image" src="../../source/images/JSP学习日志/1.png">
</p>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>音量
    <input type="range" name="voice" max="100" min="0">
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索框</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>搜索框
    <input type="search" name="search">
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--列表</span></span><br><span class="line"><span class="comment">selected默认选项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span>国家</span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>列表
    <select>国家
        <option>中国</option>
        <option selected>美国</option>
        <option>英国</option>
    </select>
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>反馈
    <textarea name="textarea" cols="20" rows="10">文本内容</textarea>
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>添加文件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>添加文件
    <input type="file" name="file">
    <input type="button" name="upload" value="上传">    
</p>


<h3 id="表单的限制"><a href="#表单的限制" class="headerlink" title="表单的限制"></a>表单的限制</h3><ul>
<li>disabled：不可操作</li>
<li>hidden：隐藏</li>
<li>readonly：只读</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--增强鼠标可用性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>点击试试（点击汉字会跳转到文本框）<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>
    <label for="tag">点击试试（点击汉字会跳转到文本框）</label>
    <input type="text">
</p>

<h3 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文本框</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>文本框
    <input type="text" name="text" placeholder="请输入">
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--非空判断--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>url</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>url
    <input type="url" name="url" required>
</p>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义邮箱</span></span><br><span class="line"><span class="comment">https://www.jb51.net/tools/regexsc.htm正则表达式网站--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>自定义邮箱</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;diymail&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>

<h2 id="第二节-CSS"><a href="#第二节-CSS" class="headerlink" title="第二节 CSS"></a>第二节 CSS</h2><p>CSS：层叠级联样式表</p>
<h3 id="CSS的优势"><a href="#CSS的优势" class="headerlink" title="CSS的优势"></a>CSS的优势</h3><ol>
<li>内容和表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式十分的丰富</li>
<li>建议使用独立于html的css文件</li>
<li>利用SEO，容易被搜索引擎收录</li>
</ol>
<h3 id="CSS的3中导入方式"><a href="#CSS的3中导入方式" class="headerlink" title="CSS的3中导入方式"></a>CSS的3中导入方式</h3><p>行内样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h4 style="color:red">我是标题
</h4>


<p>内部式</p>
<!--内部式-->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果如下：</p>
<style>
    h4{
        color:blue;
    }
</style>
<h4>
    我是标题
</h4>


<p>外部式：</p>
<p>​        外部式较前两种而言更加规范，往往采用这种方式。</p>
<p>​        涉及到两个文件，html文件和css文件</p>
<p>css文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h4&#123;</span><br><span class="line">color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将html文件与css文件链接起来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>优先级：</p>
<p>​        遵循覆盖原则，按行加载，因此后加载的会将之前加载的覆盖掉</p>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>标签选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--标签选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    标签1</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    标签2</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<style>
    h4{
        color:red;
    }
</style>
<h4>
    标签1
</h4>
<h4>
    标签2
</h4>


<p>类选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--类选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.BQ1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.BQ2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;BQ1&quot;</span>&gt;</span></span><br><span class="line">    标签1</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;BQ2&quot;</span>&gt;</span></span><br><span class="line">    标签2</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS:</p>
<blockquote>
<p>​    可以复用，对应相同类的有相同样式</p>
</blockquote>
<p>id选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--id选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#BQ</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: coral;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.style1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;style1&quot;</span>&gt;</span>标签1<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">id</span>=<span class="string">&quot;BQ&quot;</span>&gt;</span>标签2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;style1&quot;</span>&gt;</span>标签3<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS:</p>
<blockquote>
<p>​        不可以复用，当需要指定某一个标签改变样式时，使用id</p>
<p>选择器优先级问题：</p>
<p>​        id选择器&gt;class选择器&gt;标签选择器</p>
</blockquote>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>​            属性选择器是将id选择器和类选择器结合的一种选择器。</p>
<p>格式为：</p>
<p>​        a[属性名]{对应的属性}</p>
<hr>

<h2 id="第三节-JSP"><a href="#第三节-JSP" class="headerlink" title="第三节 JSP"></a>第三节 JSP</h2><h3 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h3><p>1.内部标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&quot;hello world&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.外部引入</p>
<p>a.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS：</p>
<blockquote>
<p>不用定义type，也默认是JavaScript</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h3><p>1.定义变量  变量类型  变量名 = 变量值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> score =<span class="number">1</span></span></span><br><span class="line"><span class="javascript">alert(score);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.条件控制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">60</span>&amp;&amp;score&lt;<span class="number">70</span>)&#123;</span><br><span class="line">    alert(<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log();在浏览器控制台中打印信息</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>0.变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> la</span><br><span class="line"><span class="comment">//不能以数字开头，var在方法内部定义为局部变量，在方法外部定义为全局变量</span></span><br><span class="line"><span class="keyword">let</span> la</span><br><span class="line"><span class="comment">//定义局部变量</span></span><br></pre></td></tr></table></figure>

<p>1.number</p>
<p>js不区分小数和整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数</span></span><br><span class="line"><span class="number">123.1</span><span class="comment">//浮点数</span></span><br><span class="line"><span class="number">1.123e3</span><span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">999</span>/负数</span><br><span class="line"><span class="literal">NaN</span><span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span><span class="comment">//无限大</span></span><br></pre></td></tr></table></figure>

<p>2.字符串 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>  <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<p>多行字符串编写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`11</span></span><br><span class="line"><span class="string">			22</span></span><br><span class="line"><span class="string">			33`</span></span><br></pre></td></tr></table></figure>

<p>模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`11</span></span><br><span class="line"><span class="string">		   22</span></span><br><span class="line"><span class="string">		   33`</span></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好,<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p>字符串长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.length</span><br></pre></td></tr></table></figure>

<p>PS：</p>
<blockquote>
<p>字符串有不可变性</p>
</blockquote>
<p>3.布尔值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>4.逻辑运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp; 和</span><br><span class="line">|| 或</span><br><span class="line">！ 非</span><br></pre></td></tr></table></figure>

<p>5.比较运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=</span><br><span class="line">== 等于（类型不一样，值一样，也会判断为<span class="literal">true</span>)</span><br><span class="line">=== 绝对等于(类型一样，值一样，判断为<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>PS：</p>
<blockquote>
<ul>
<li>NaN与所有的数值都不相等，包括自己</li>
<li>只能通过isNaN(NaN)来判断这个数是否是NaN</li>
</ul>
</blockquote>
<p>浮点数问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>​        尽量避免使用浮点数进行运算，存在精度问题</p>
<p>6.null和undefined</p>
<ul>
<li>null 空</li>
<li>undefined 未定义</li>
</ul>
<p>7.数组</p>
<p>Java的数组必须是一系列相同类型的对象；在JavaScript中不需要这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">true</span>,<span class="string">&quot;hello&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>取数组下标，如果越界了，就会undefined，并不会像java一样报错</p>
<p>长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure>

<p>PS：</p>
<blockquote>
<p>加入给arr.length赋值，数组大小就会发生变化（数组是动态的），如果赋值过小，元素就会丢失</p>
<p>字符串的”1”和数字1是不同的</p>
</blockquote>
<p>slice( )</p>
<p>截取array的一部分，返回一个新数组，包头不包尾</p>
<p>push( )、pop( )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push:压入到尾部</span><br><span class="line"><span class="attr">pop</span>:弹出尾部的一个元素</span><br></pre></td></tr></table></figure>

<p>unshift( )、shift( )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unshift:压入到头部</span><br><span class="line">shift：弹出头部的一个元素</span><br></pre></td></tr></table></figure>

<p>concat( )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">arr1.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&gt;(<span class="number">6</span>)[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>PS:</p>
<blockquote>
<p>concat( )并没有修改数组，只是会返回一个新的数组</p>
</blockquote>
<p>多维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line">&gt;[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>8.对象</p>
<p>对象是{ },数组是[ ]</p>
<blockquote>
<p>每个属性之前用逗号隔开，最后一个不需要添加</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名：属性值</span><br><span class="line">    属性名：属性值</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java创建对象</span></span><br><span class="line"><span class="comment">//Person person = new Person(1,2,3);</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;yr&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt;<span class="string">&quot;yr&quot;</span></span><br><span class="line">person.age</span><br><span class="line">&gt;<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>动态的删减属性，通过delete删除对象的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line">&gt;<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>动态的添加，直接给新的属性添加值即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.email=<span class="string">&quot;400@123.com&quot;</span></span><br><span class="line">&gt;<span class="string">&quot;400@123.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>判断属性是否在这个对象中：xxx   in   xxx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt;<span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt;<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>判断属性值是否在这个对象中   has</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">&quot;toString&quot;</span>)</span><br><span class="line">&gt;<span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">&gt;<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>PS:</p>
<blockquote>
<p>‘use strict’;   严格检查模式，预防JavaScript的随意性导致产生的一些问题，必须写在JavaScript的第一行</p>
<p>js中对象，{······}表示一个对象，键值对描述属性xxxx:xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号 </p>
<p>使用一个不存在的对象属性，不会报错，只会报undefined</p>
</blockquote>
<p>9.流程控制</p>
<p>if判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hah&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while循环，避免程序死循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age=age+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; things.length; i++) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(thing[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>forEach循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>for···in···    得到对应的索引</p>
<p>for···of···    得到对应的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line">	<span class="keyword">if</span>(age.hasOwnProperty(num))&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(age[num]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">of</span> age)&#123;</span><br><span class="line">	<span class="keyword">if</span>(age.hasOwnProperty(num))&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2023/07/04/JavaWeb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>web开发：</p>
<ul>
<li>web，网页</li>
</ul>
<span id="more"></span>

<ul>
<li><p>静态web</p>
<ul>
<li>html,css</li>
<li>提供给所有人看的数据始终不会发生变化</li>
</ul>
</li>
<li><p>动态web</p>
<ul>
<li>淘宝，几乎所有网站</li>
<li>提供给所有人看的数据始终会发生变化</li>
<li>技术栈：Servlet/JSP，ASP,PHP</li>
</ul>
<p>在java中，动态web资源开发的技术统称维javaweb</p>
</li>
</ul>
<h3 id="web应用程序"><a href="#web应用程序" class="headerlink" title="web应用程序"></a>web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>
<ul>
<li>a.html、b.html···多个web资源，这些web资源可以被外界访问，对外界提供服务</li>
<li>能访问到的任何一个页面或者资源，都存在于这个世界上某一计算机上</li>
<li>统一的web资源会被放在同一个文件夹下，web应用程序-&gt;Tomcat:服务器</li>
<li>一个web应用由多部份组成<ul>
<li>html,css,js</li>
<li>jsp,servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>
<p><img src="/../images/JavaWeb/image-20211026154803740.png"></p>
<h3 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态web</h3><ul>
<li>*.html,*.htm，这些都是网页的后缀，如果服务器上一直存在这些东西，那么就可以访问</li>
</ul>
<p><img src="/../images/JavaWeb/image-20211026154837911.png"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认主机名：localhost-&gt;127.0.0.1</p>
<p><strong>网站是如何访问的</strong></p>
<ol>
<li>输入一个域名</li>
<li>首先检查本机C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射<ol>
<li>本机有：直接返回对应的ip地址，这个地址中，有需要访问的web程序，则可以直接访问</li>
<li>本机没有：去DNS服务器找，找到的话就返回，找不到就返回找不到</li>
</ol>
</li>
</ol>
<p><img src="/../images/JavaWeb/image-20211028154637751.png" alt="image-20211028154637751"></p>
<h3 id="发布一个web网站"><a href="#发布一个web网站" class="headerlink" title="发布一个web网站"></a>发布一个web网站</h3><blockquote>
<p>将自己写的网站，放到服务器（Tomcat）中指定的web应用的文件夹（webapps）下，就可以访问网站</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps:Tomcat服务器的web目录</span><br><span class="line">    -ROOT  （默认目录）</span><br><span class="line">    -kuangstudy：网站的目录名</span><br><span class="line">    	-WEB-INF</span><br><span class="line">    		-classes:java程序</span><br><span class="line">            -lib:web应用所依赖的jar包</span><br><span class="line">            -web.xml:网站配置文件</span><br><span class="line">        -index.html：默认的首页</span><br><span class="line">        -<span class="keyword">static</span></span><br><span class="line">        	-css</span><br><span class="line">                -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br></pre></td></tr></table></figure>

<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>HTTP(超文本传输协议)是一个简单的请求-响应协议，通常运行在TCP之上</p>
<ul>
<li>文本：html，字符串</li>
<li>超文本：图片，音乐，视频，定位，地图</li>
<li>80</li>
</ul>
<p>HTTPS：安全</p>
<ul>
<li>443</li>
</ul>
<h3 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h3><ul>
<li>HTTP/1.0:客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>
<li>HTTP/2.0:k客户端可以与web服务器连接后，能够获得多个web资源</li>
</ul>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><blockquote>
<p>客户端–发请求(Request)–服务器</p>
</blockquote>
<p>请求百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL: https:<span class="comment">//www.baidu.com/</span></span><br><span class="line">Request Method: GET		get方法/post方法</span><br><span class="line">Status Code: <span class="number">200</span> OK		状态码 <span class="number">200</span> = ok</span><br><span class="line">Remote Address: <span class="number">39.156</span><span class="number">.66</span><span class="number">.18</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: text/html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>		语言</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a><strong>请求行</strong></h4><ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：GET,POST， HEAD,DELETE,PUT,TRACT…<ul>
<li>get:能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post:能够携带的参数比较多，大小无限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li>
</ul>
</li>
</ul>
<h4 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a><strong>消息头</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: 支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式 GBK	UTF-<span class="number">8</span>	GB2312	ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language: 语言环境</span><br><span class="line">Cache-Control: 缓存控制</span><br><span class="line">Connection: 请求完成断开还是保持连接</span><br><span class="line">HOST：主机</span><br></pre></td></tr></table></figure>



<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><blockquote>
<p>服务器–响应–客户端</p>
</blockquote>
<p>百度响应：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span>		缓存控制</span><br><span class="line">Connection: keep-alive		连接</span><br><span class="line">Content-Encoding: gzip		编码</span><br><span class="line">Content-Type: text/html;charset=utf-<span class="number">8</span>		类型</span><br></pre></td></tr></table></figure>

<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: 支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式 GBK	UTF-<span class="number">8</span>	GB2312	ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language: 语言环境</span><br><span class="line">Cache-Control: 缓存控制</span><br><span class="line">Connection: 请求完成断开还是保持连接</span><br><span class="line">HOST：主机</span><br><span class="line">Refresh: 刷新时间</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure>

<h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>200：请求响应成功</p>
<p>3xx：请求重定向</p>
<ul>
<li>重定向：重新到指定的新位置</li>
</ul>
<p>4xx：找不到资源  404</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5xx：服务器代码错误  500  502（网关错误）</p>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>自动导入和配置jar包</p>
<h3 id="Maven项目架构管理工具"><a href="#Maven项目架构管理工具" class="headerlink" title="Maven项目架构管理工具"></a>Maven项目架构管理工具</h3><p>Maven的核心思想：<strong>约定大于配置</strong></p>
<h3 id="在idea中使用Maven"><a href="#在idea中使用Maven" class="headerlink" title="在idea中使用Maven"></a>在idea中使用Maven</h3><p><img src="/../images/JavaWeb/image-20211101092050977.png" alt="image-20211101092050977"></p>
<p><img src="/../images/JavaWeb/image-20211101092516885.png" alt="image-20211101092516885"></p>
<h3 id="在idea中使用Tomcat"><a href="#在idea中使用Tomcat" class="headerlink" title="在idea中使用Tomcat"></a>在idea中使用Tomcat</h3><p><img src="/../images/JavaWeb/image-20211101105815548.png" alt="image-20211101105815548"></p>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul>
<li>Servlet是sun公司开发动态web的一门技术</li>
<li>sun在这些API中提供的一个接口：Servlet，开发一个Servlet程序，只需要两个步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的Java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p>实现了Servlet接口的Java程序就叫做Servlet</p>
<h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p> <strong>关于Maven父子工程的理解</strong></p>
<p>父项目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;<span class="keyword">module</span>&gt;servlet-<span class="number">01</span>&lt;/<span class="keyword">module</span>&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure>

<p>子项目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;artifactId&gt;javaweb-<span class="number">02</span>-servelet&lt;/artifactId&gt;</span><br><span class="line">    &lt;groupId&gt;com.MizuGo&lt;/groupId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>

<p><strong>编写一个Servlet程序</strong></p>
<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，可直接集成HttpServlet</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*java文件夹*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;hello,Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写Servlet的映射</strong></p>
<p>原因：写的为Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以需要在web服务中注册我们写的Servlet，还需要设置一个浏览器能够访问的路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--web.xml文件--&gt;</span><br><span class="line">&lt;!--注册Servlet--&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">servlet</span>.<span class="title">HelloServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;//对应的<span class="title">java</span>文件</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;!--<span class="title">Servlet</span>的请求路径--&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">hello</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;//应与上面保持一致</span></span><br><span class="line"><span class="class">  &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hello</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;//访问路径</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置Tomcat</strong></p>
<blockquote>
<p>PS:此处有个大坑，Tomcat 10修改了包名，在运行的时候首先会加载tomcat自带的servlet-api包，从而导致自己导入的包名与tomcat自带的不一致，报错500</p>
</blockquote>
<h3 id="Servlet运行原理"><a href="#Servlet运行原理" class="headerlink" title="Servlet运行原理"></a>Servlet运行原理</h3><p><img src="/../images/JavaWeb/image-20211102142518178.png" alt="image-20211102142518178"></p>
<h3 id="Mapping问题"><a href="#Mapping问题" class="headerlink" title="Mapping问题"></a>Mapping问题</h3><ol>
<li><p>一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定一些后缀或者前缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>优先级问题</p>
<blockquote>
<p>若已经指定了固定路径，则访问固定路径时不会跳转到通用路径                                </p>
</blockquote>
</li>
</ol>
<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><blockquote>
<p>web容器在启动的时候，会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用，Context凌驾于所有的Servlet之上，不同的Servlet之间可以用Context作为中间商交换数据</p>
</blockquote>
<h4 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h4><p>在这个Servlet中保存的数据，可以在另外一个servlet中拿到，需要优先访问上传数据的页面，再访问获取数据的页面，否则会导致无数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*HelloServlet.java</span></span><br><span class="line"><span class="comment">*将数据上传到Context</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = <span class="string">&quot;yurui&quot;</span>;</span><br><span class="line">         ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">         servletContext.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*GetServlet.java</span></span><br><span class="line"><span class="comment">*获取Context中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String username = (String)servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    resp.getWriter().print(<span class="string">&quot;user&quot;</span>+username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/get<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ParmaServlet.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);<span class="comment">//对应xml文件中初始化参数的名字</span></span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.ParamServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ServletDemo.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    servletContext.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);<span class="comment">//转向路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ParamServlet.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.ParamServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请求转发流程图：</p>
<p><img src="/../images/JavaWeb/image-20211104142038940.png" alt="image-20211104142038940"></p>
<blockquote>
<p>A请求C的数据</p>
<p>先访问B，由B转发来自A的请求到C，拿到C的数据后再经过B返回给A（在这个过程中，域名不会改变）</p>
</blockquote>
<p>重定向流程图：</p>
<p><img src="/../images/JavaWeb/image-20211104143225421.png" alt="image-20211104143225421"></p>
<blockquote>
<p>A请求C的数据</p>
<p>先访问B，B返回信息给A数据应该在C处，A收到来自B的信息再去访问C（在这个过程中，域名会发生改变）</p>
</blockquote>
<blockquote>
<p><strong>请求转发和重定向的区别</strong></p>
<p>相同点</p>
<ul>
<li>页面都会跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化  307<ul>
<li>重定向时候，url地址栏会发生变化  302</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h4><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现都被打包到了同一个路径下：classes，俗称为classpath</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ServletDemo2.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    InputStream in = servletContext.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<span class="comment">//相对路径，/代表当前项目目录</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(in);<span class="comment">//读取流文件</span></span><br><span class="line">    String username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String type = properties.getProperty(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">    resp.getWriter().print(<span class="string">&quot;&lt;font style=&#x27;color:red;font-size:60px&#x27;&gt;&quot;</span>+username+<span class="string">&quot;&lt;/font&gt;&quot;</span>);</span><br><span class="line">    resp.getWriter().print(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>properties文件往往放在resources文件夹下，如果放在java文件夹下可能会导致导出失败</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要在该项目的pom.xml文件下添加如下代码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打印信息可以添加要打印的相应格式，并以字符串的形式将其连接起来</p>
</blockquote>
<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletRequest</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要获取客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h4 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h4><p><strong>负责向浏览器发送数据的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p><strong>负责向浏览器发送响应头的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h4><ol>
<li>向浏览器输出消息    </li>
<li>下载文件<ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名</li>
<li>设置让浏览器能够支持下载所需的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*FileServlet.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//1. 要获取下载文件的路径</span></span><br><span class="line">        String realPath = <span class="string">&quot;D:\\java-1.0-maven\\response\\target\\response\\WEB-INF\\classes\\1.pdf&quot;</span>;</span><br><span class="line"><span class="comment">//2. 下载的文件名</span></span><br><span class="line">       String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);<span class="comment">//lastIndexOf能够取到最后一次出现该字符的位置</span></span><br><span class="line"><span class="comment">//3. 设置让浏览器能够支持下载所需的东西</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line"><span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"><span class="comment">//5. 创建缓冲区</span></span><br><span class="line">   <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//6. 获取OutputStream</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line"><span class="comment">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line">        <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现重定向"><a href="#实现重定向" class="headerlink" title="实现重定向"></a>实现重定向</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*RedirectServlet.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/res/down&quot;</span>);<span class="comment">//res是服务器带有的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>file<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.FileServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>file<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/down<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>red<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.RedirectServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>red<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/red<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/res/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>req<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>req<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/JavaWeb/image-20211106100242239.png" alt="image-20211106100242239"></p>
<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*LoginServlet.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    String[] parameterValues = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(parameterValues));</span><br><span class="line">    <span class="comment">//这里的/代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--index.jsp--%&gt;</span><br><span class="line">&lt;div style=&quot;text-align: center&quot;&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">        爱好:</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbys&quot; value=&quot;电影&quot;&gt;电影</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbys&quot; value=&quot;唱歌&quot;&gt;唱歌</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbys&quot; value=&quot;跳舞&quot;&gt;跳舞</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h2><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p><strong>概念</strong></p>
<p>用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称为会话</p>
<p><strong>有状态会话</strong></p>
<p>一个人去到一个地方，留下了足迹，下次再去到这个地方，其他人知道他已经来过的情况</p>
<blockquote>
<p><strong>证明访问过一个网站</strong></p>
<p>cookie：服务端给客户端一个信件，客户端下次访问服务端带上信件即可</p>
<p>session：服务器登记访问过这个网站了，下次再来的时候由服务器来匹配访问的人</p>
</blockquote>
<h3 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h3><p>cookie</p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p>session</p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息，我们可以把信息和数据放在session</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//获得cookie</span></span><br><span class="line">cookie.getName()；<span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue()；<span class="comment">//获得cookie中的value</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>,System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);<span class="comment">//创建一个新的cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置cookie的有效期为一天</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>一个Cookie只能保存一个信息</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li>
<li>Cookie大小有限制：4kb</li>
<li>300个cookie为浏览器上限</li>
</ul>
</blockquote>
<p><strong>删除Cookie</strong></p>
<ul>
<li>不设置有效期，关闭浏览器则自动失效</li>
<li>设置有效期时间为0；</li>
</ul>
<p><strong>编码解码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;中文&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Session-重点"><a href="#Session-重点" class="headerlink" title="Session(重点)"></a>Session(重点)</h3><p><strong>概念</strong></p>
<ul>
<li>服务器会给每个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li>
<li>用户登录之后，整个网站都可以访问；-&gt;保存用户信息；保存购物车信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"><span class="comment">//给Session中存东西</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;yr&quot;</span>);</span><br><span class="line"><span class="comment">//获取Session的id</span></span><br><span class="line">String id = session.getId();</span><br><span class="line"><span class="comment">//判断session是不是新创建</span></span><br><span class="line">session.isNew();</span><br><span class="line"><span class="comment">//从Session中取东西</span></span><br><span class="line">session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>两种注销方式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xml中设置失效方式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java中注销方式</span></span><br><span class="line"><span class="comment">//手动注销session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Session和Cookie区别</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session把用户的数据写到用户独占Session中，服务器端保存（保存重要的信息，减少资源浪费）</li>
<li>Session对象由服务创建</li>
</ul>
</blockquote>
<p><strong>使用场景</strong></p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中</li>
</ul>
<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>实体类</p>
<p>JavaBean有特定的写法</p>
<ul>
<li>必须有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法</li>
</ul>
<p>一般用来和数据库的字段做映射：ORM;</p>
<p>ORM:对象关系映射</p>
<ul>
<li>表-&gt;类</li>
<li>字段-&gt;属性</li>
<li>行记录-&gt;对象</li>
</ul>
<p>people表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>MizuGo1</td>
<td>22</td>
<td>西安</td>
</tr>
<tr>
<td>2</td>
<td>MizuGo2</td>
<td>21</td>
<td>重庆</td>
</tr>
<tr>
<td>3</td>
<td>MizuGo3</td>
<td>23</td>
<td>北京</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*java中数据库表对应形式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">&quot;MizuGo1&quot;</span>,<span class="number">22</span>,<span class="string">&quot;西安&quot;</span>)；</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">&quot;MizuGo2&quot;</span>,<span class="number">21</span>,<span class="string">&quot;重庆&quot;</span>)；</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">&quot;MizuGo3&quot;</span>,<span class="number">23</span>,<span class="string">&quot;北京&quot;</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--类似于创建对象，page表示只在当前页生效--%&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;people&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.MizuGo.pojo.People&quot;</span> scope=<span class="string">&quot;page&quot;</span>/&gt;</span><br><span class="line">&lt;%--设置属性--%&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;西安&quot;</span>/&gt;</span><br><span class="line">&lt;%--获取属性值--%&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;address&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h2><blockquote>
<p>什么是MVC？</p>
<p>MODEL:模型，与数据库对应的实体类</p>
<ul>
<li>控制业务操作、保存数据、修改数据、删除数据、查询数据</li>
</ul>
<p>View：视图</p>
<ul>
<li>展示数据模型</li>
<li>提供用户操作</li>
</ul>
<p>Controller：控制器</p>
<ul>
<li>接受用户的数据</li>
<li>交给业务层返回数据</li>
<li>视图跳转</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">登录---&gt;接受用户的登录请求---&gt;处理用户的请求(获取用户的登录的参数：username、password)---&gt;交给业务层处理登录业务(判断用户名密码是否正确)---&gt;Dao层查询用户名和密码是否正确---&gt;数据库</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP入门</title>
    <url>/2023/07/04/HTTP%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Web网络基础"><a href="#Web网络基础" class="headerlink" title="Web网络基础"></a>Web网络基础</h2><h3 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>与互联网相关联的协议集合统称</p>
<h3 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h3><p><img src="/../images/HTTP%E5%85%A5%E9%97%A8/image-20230301002507453.png" alt="image-20230301002507453"></p>
<p>应用层：决定了向用户提供应用服务时通信的活动</p>
<p>传输层：提供处于网络连接中两台计算机之间的数据传输</p>
<p>网络层：处理在网络上流动的数据包</p>
<blockquote>
<p>数据包是网络传输的最小数据单位</p>
</blockquote>
<p>数据链路层：处理连接网络的硬件部分；硬件上的范畴均在链路层的作用范围之内</p>
<span id="more"></span>

<blockquote>
<p>PS：OSI是一个理论上的网络通信模型，而TCP/IP则是实际运行的网络协议</p>
<p><img src="/../images/HTTP%E5%85%A5%E9%97%A8/image-20220719172606998.png" alt="image-20220719172606998"></p>
<p>五层体系结构为了方便学习，折中<code>OSI体系结构</code>和<code>TCP/IP体系结构</code>，综合二者的优点，这样既简洁，又能将概念讲清楚，比起TCP/IP架构多了物理层</p>
<p><img src="/../images/HTTP%E5%85%A5%E9%97%A8/image-20220719172729939.png" alt="image-20220719172729939"></p>
</blockquote>
<h3 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h3><p>封装：发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息；反之，接收端在接受数据时，会将对应的首部消去</p>
<h3 id="ARP（Address-Resolution-Protocol-地址解析协议"><a href="#ARP（Address-Resolution-Protocol-地址解析协议" class="headerlink" title="ARP（Address Resolution Protocol)地址解析协议"></a>ARP（Address Resolution Protocol)地址解析协议</h3><ul>
<li>通信中转过程中会根据下一站中转设备的MAC地址来搜索下一个中转目标</li>
<li>ARP协议可以根据IP地址反查出对应的MAC地址（MAC地址为网卡所属的固定地址，不会更改）</li>
</ul>
<h3 id="确保可靠的TCP协议"><a href="#确保可靠的TCP协议" class="headerlink" title="确保可靠的TCP协议"></a>确保可靠的TCP协议</h3><p>TCP协议提供可靠的字节流服务</p>
<blockquote>
<p>字节流服务：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理</p>
</blockquote>
<p>将大块的数据分割成报文段进行传输，并在接收端重组分割的报文段</p>
<p>利用三次握手四次挥手等措施来确保数据一定可达</p>
<h3 id="DNS-Domain-Name-System-域名解析系统"><a href="#DNS-Domain-Name-System-域名解析系统" class="headerlink" title="DNS(Domain Name System)域名解析系统"></a>DNS(Domain Name System)域名解析系统</h3><p>提供域名到IP地址之间的解析服务</p>
<ul>
<li>域名–&gt;IP</li>
<li>IP–&gt;域名</li>
</ul>
<h3 id="URI（Uniform-Resource-Identifier-统一资源标识符与URL（Uniform-Resource-Locator-统一资源定位符"><a href="#URI（Uniform-Resource-Identifier-统一资源标识符与URL（Uniform-Resource-Locator-统一资源定位符" class="headerlink" title="URI（Uniform Resource Identifier)统一资源标识符与URL（Uniform Resource Locator)统一资源定位符"></a>URI（Uniform Resource Identifier)统一资源标识符与URL（Uniform Resource Locator)统一资源定位符</h3><p>URL为URI子集</p>
<h4 id="绝对URI格式"><a href="#绝对URI格式" class="headerlink" title="绝对URI格式"></a>绝对URI格式</h4><p><a href="http://user:pass@www.example.jp/dir/index.html?uid=1#ch1">http://user:pass@www.example.jp:80/dir/index.html?uid=1#ch1</a></p>
<p>访问该域名大体流程</p>
<p><img src="/2023/07/04/HTTP%E5%85%A5%E9%97%A8/Workspaces\hexo\source\images\HTTP入门\image-20220719093624423.png" alt="image-20220719093624423"></p>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="客户端与服务器端"><a href="#客户端与服务器端" class="headerlink" title="客户端与服务器端"></a>客户端与服务器端</h3><p>客户端：请求访问文本或图像等资源的一端</p>
<p>服务器端：提供资源响应的一端</p>
<h3 id="通过请求和响应的交换达成通信"><a href="#通过请求和响应的交换达成通信" class="headerlink" title="通过请求和响应的交换达成通信"></a>通过请求和响应的交换达成通信</h3><p>请求报文：由请求方法、请求URI、协议版本、<code>可选的</code>请求首部字段和内容实体</p>
<p>响应报文：协议版本、状态码（表示成功或失败的数字代码）、用以解释状态码的原因短语、<code>可选的</code>响应首部字段及实体主体</p>
<h3 id="HTTP是无状态协议"><a href="#HTTP是无状态协议" class="headerlink" title="HTTP是无状态协议"></a>HTTP是无状态协议</h3><p>HTTP：是一种不保存状态，无状态协议</p>
<blockquote>
<p>为了更快地处理大量事务，确保协议的可伸缩性</p>
<p>当网站需要保持用户的登录状态，HTTP协议的不保存状态无法满足该需求，引入Cookie来解决问题</p>
</blockquote>
<h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>GET：请求访问已被URI识别的资源</p>
<p>POST：传输实体的主体</p>
<p>PUT：传输文件（HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件，存在安全性问题，一般不采用该方法）</p>
<p>HEAD：获取报文首部，与GET方法一样，但是不返回报文主体部分</p>
<p>DELETE：删除文件，与PUT相反的方法，但是同样不带验证机制，因此也往往不采用</p>
<p>OPTIONS：询问支持的方法，查询针对请求URI指定的资源支持的方法</p>
<blockquote>
<p>OPTIONS * HTTP/1.1</p>
<p>Host:<a href="http://www.example.com/">www.example.com</a></p>
<p>*代表服务器本身</p>
</blockquote>
<p>TRACE：追踪路径，让Web服务器端将之前的请求通信返回给客户端（查询到发送出去的服务请求是怎样被加工修改/篡改）</p>
<blockquote>
<p>容易引发XST攻击（Cross-Site Tracing跨站追踪），基本上不采用该方法</p>
</blockquote>
<p>CONNECT:要求用隧道协议连接代理</p>
<h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>在HTTP/1.1中，所有的连接都默认为持久连接（任意一段未明确提出断开连接，则保持连接状态）</p>
<p>HTTP/1.0版本并不默认支持持久连接</p>
<p>客户端和服务器端都需要支持持久连接</p>
<h3 id="管线化（Pipelining）"><a href="#管线化（Pipelining）" class="headerlink" title="管线化（Pipelining）"></a>管线化（Pipelining）</h3><p>持久连接的实现促成了部分请求的管线化实现，无须等待之前的请求反馈的响应，即可发起下一个请求，节省时间</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie通过在请求和响应报文中写入Cookie信息来控制客户端状态</p>
<ol>
<li>Cookie由服务器端生成，在客户端发起第一次访问后，服务器会返回带有Set-Cookie的响应报文<img src="/../images/HTTP%E5%85%A5%E9%97%A8/image-20220823144246867.png" alt="image-20220823144246867"></li>
<li>当客户端第二次访问服务器端的时候，将Cookie作为请求报文一并发送给服务器端，服务器端会根据Cookie来响应<img src="/../images/HTTP%E5%85%A5%E9%97%A8/image-20220823144256852.png" alt="image-20220823144256852"></li>
</ol>
<h2 id="HTTP报文内的HTTP信息"><a href="#HTTP报文内的HTTP信息" class="headerlink" title="HTTP报文内的HTTP信息"></a>HTTP报文内的HTTP信息</h2><p>HTTP报文：大致分为报文首部和报文主体两部分，通常，不一定要有报文主体</p>
<h3 id="报文主体与实体主体差异"><a href="#报文主体与实体主体差异" class="headerlink" title="报文主体与实体主体差异"></a>报文主体与实体主体差异</h3><ul>
<li>报文：HTTP通信中的基本单位，由8位组字节流组成，通过HTTP通信传输</li>
<li>实体：作为请求或相应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成</li>
</ul>
<blockquote>
<p>通常，报文主体等于实体主体，只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异</p>
</blockquote>
<h3 id="压缩传输的内容编码"><a href="#压缩传输的内容编码" class="headerlink" title="压缩传输的内容编码"></a>压缩传输的内容编码</h3><p>HTTP编码功能：类似于压缩</p>
<blockquote>
<p>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由<code>客户端</code>接收并<code>负责解码</code></p>
</blockquote>
<h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><p>HTTP通信过程中：</p>
<ol>
<li>请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。</li>
<li>在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面</li>
</ol>
<p>实体主体分块的功能称为：分块传输编码</p>
<h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>范围请求：指定范围发送的请求叫范围请求（Range Request）</p>
<blockquote>
<p>请求报文：</p>
<p>GET /tip.jpg HTTP/1.1</p>
<p>Host:<a href="http://www.example.com/">www.example.com</a></p>
<p>Range:bytes = 5001-10000</p>
<p>多重范围：</p>
<p>Range: bytes=0-3000,5000-7000</p>
<p>针对范围请求，响应会返回状态码为206的响应报文，如果服务器端无法响应范围请求，则会返回状态码为200 OK和完整实体内容</p>
</blockquote>
<h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>内容协商机制：客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。</p>
<p>以语言、字符集、编码方式等为基准判断响应的资源</p>
<p>内容协商技术类型：</p>
<ol>
<li>服务器驱动协商（Server-driven Negotiation）:由服务器端进行里内容协商</li>
<li>客户端驱动协商（Agent-driven Negotiation）:由客户端进行内容协商的方式</li>
<li>透明协商（Transparent Negotiation）:服务器驱动和客户端驱动的结合体</li>
</ol>
<h2 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h2><p>状态码：当客户端向服务器端发送请求时，描述返回的请求结果</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>原因短语</th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>Informational（信息性状态码）</td>
<td>接受的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection（重定向状态码）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error（客户端错误状态码）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error（服务器错误状态码）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><p>表明请求被正常处理了</p>
<p><strong>200 OK</strong></p>
<blockquote>
<p>客户端发来的请求在服务器端被正常处理了</p>
</blockquote>
<p><strong>204 No Content</strong></p>
<blockquote>
<p>服务器接受的请求已成功处理，但是返回的响应报文中不包含实体的主体部分（无资源返回）</p>
</blockquote>
<p><strong>206 Partial Content</strong></p>
<blockquote>
<p>表示客户端进行了范围请求，服务器成功执行了这部分的请求</p>
</blockquote>
<h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><p>表明浏览器需要执行某些特殊的处理以正确处理请求</p>
<p><strong>301 Moved Permanently</strong></p>
<blockquote>
<p>永久性重定向。请求的资源已被分配了新的URI，以后应使用资源现在所指的URI</p>
</blockquote>
<p><strong>302 Found</strong></p>
<blockquote>
<p>临时重定向。表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问</p>
</blockquote>
<p><strong>303 See Other</strong></p>
<blockquote>
<p>请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源</p>
<p>303与302有相同的功能，但是303明确指出要采用GET方法获取资源</p>
</blockquote>
<p><strong>304 Not Modified</strong></p>
<blockquote>
<p>客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，返回304</p>
<p>304与重定向没有关系</p>
</blockquote>
<p><strong>307 Temporary Redirect</strong></p>
<blockquote>
<p>临时重定向。与302有相同的含义。会遵照浏览器标准，不会从POST变成GET</p>
</blockquote>
<h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><p>4XX表明客户端是发送错误的原因所在</p>
<p><strong>400 Bad Request</strong></p>
<blockquote>
<p>请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求</p>
</blockquote>
<p><strong>401 Unauthorized</strong></p>
<blockquote>
<p>发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。</p>
<p>若之前已进行过一次请求，则表示用户认证失败</p>
</blockquote>
<p><strong>403 Forbidden</strong></p>
<blockquote>
<p>表明对请求资源的访问被服务器拒绝了。</p>
<p>可以在实体的主体部分对原因进行描述，这样就能让用户看到了</p>
<p>未获得文件系统的访问授权，或者访问权限出现某些问题可能会导致403</p>
</blockquote>
<p><strong>404 Not Found</strong></p>
<blockquote>
<p>服务器上无法找到请求的资源。</p>
<p>也可以在服务器端拒绝请求且不想说明理由时使用</p>
</blockquote>
<h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><p>5XX的相应结果表明服务器本身发生错误</p>
<p><strong>500 Internal Server Error</strong></p>
<blockquote>
<p>服务器端在执行请求时发生了错误。</p>
<p>也有可能是Web应用存在的bug或某些临时的故障</p>
</blockquote>
<p><strong>503 Service Unavailable</strong></p>
<blockquote>
<p>表面服务器暂时处于超负载在或正在进行停机维护，现在无法处理请求</p>
</blockquote>
<hr>
<blockquote>
<p>PS：状态码并不一定是准确的，可能出现状态码与实际情况不一致的情况</p>
</blockquote>
<h2 id="与HTTP协作的Web服务器"><a href="#与HTTP协作的Web服务器" class="headerlink" title="与HTTP协作的Web服务器"></a>与HTTP协作的Web服务器</h2><h3 id="单台虚拟主机实现多个域名"><a href="#单台虚拟主机实现多个域名" class="headerlink" title="单台虚拟主机实现多个域名"></a>单台虚拟主机实现多个域名</h3><p>一台HTTP服务器可以搭建多个Web站点</p>
<p>即使物理层面只有一台服务器，使用虚拟主机的功能，可以假想已具有多台服务器</p>
<blockquote>
<p>域名通过DNS服务器映射到IP地址</p>
<p>当请求发送到服务器时，已是以IP地址形式访问</p>
</blockquote>
<h3 id="通信数据转发程序"><a href="#通信数据转发程序" class="headerlink" title="通信数据转发程序"></a>通信数据转发程序</h3><p>HTTP通信时，用于通信数据转发的应用程序：代理、网关、隧道等；</p>
<p>可以将请求转发给通信线路上的下一站服务器，并且能接从那台服务器发送的响应再转发给客户端</p>
<ul>
<li><p>代理</p>
<ul>
<li>具有转发功能的应用程序，接受由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端</li>
</ul>
</li>
<li><p>网关</p>
<ul>
<li><p>转发其他服务器通信数据的服务器，接收从客户端发送来的请求，同拥有资源的源服务器一样对请求进行处理</p>
<blockquote>
<p>源服务器：持有资源实体的服务器</p>
</blockquote>
</li>
</ul>
</li>
<li><p>隧道</p>
<ul>
<li>在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序</li>
</ul>
</li>
</ul>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理服务器：接受客户端发送的请求后转发给其他服务器</p>
<ul>
<li><p>代理不改变请求URI，会直接发送给持有资源的目标服务器</p>
</li>
<li><p>通过代理服务器转发请求或响应时，会写入Via首部信息（标记出经过的主机信息）</p>
</li>
</ul>
<p>代理分为两类：</p>
<ol>
<li>缓存代理<ol>
<li>代理转发响应时，缓存代理会预先将资源的副本（缓存）保存在代理服务器上</li>
<li>当代理再次接收到相同资源的请求，不再从源服务器获取资源，而是将之前缓存的资源作为响应返回</li>
</ol>
</li>
<li>透明代理<ol>
<li>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理。对报文加工的叫非透明代理</li>
</ol>
</li>
</ol>
<h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>网关工作机制相似。网关可以使通信线路上的服务器提供非HTTP协议服务</p>
<p>利用网关可以提高通信安全性（客户端与网关之间的通信线路进行加密）</p>
<h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>可按要求建立一条与其他服务器的通信线路，使用SSL等加密手段进行通信</p>
<p>确保客户端能与服务器进行安全的通信</p>
<p>隧道本身不解析HTTP请求，请求将会保持原样中转给之后的服务器</p>
<p>隧道会在通信双方断开连接时结束</p>
<h3 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a>保存资源的缓存</h3><p>缓存指代理服务器或客户端本地磁盘内保存的资源副本</p>
<p>当代理转发从服务器返回的响应时，代理服务器将会保持一份资源的副本</p>
<blockquote>
<p>利用缓存可避免多次从源服务器转发资源。从缓存服务器上就近获取资源，源服务器也不必多次处理相同的请求</p>
</blockquote>
<h3 id="缓存的有效期"><a href="#缓存的有效期" class="headerlink" title="缓存的有效期"></a>缓存的有效期</h3><p>缓存服务器内保存的缓存具有时效，并不能保证每次返回对同资源的请求</p>
<p>存在缓存时也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若缓存失败，缓存服务器会再次从源服务器获取“新”资源</p>
<h3 id="客户端的缓存"><a href="#客户端的缓存" class="headerlink" title="客户端的缓存"></a>客户端的缓存</h3><p>即是存放在客户端上的缓存</p>
<p>与缓存服务器中的缓存一致，同样会在缓存过期后请求“新”的资源</p>
<h2 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h2><p><img src="/../images/HTTP%E5%85%A5%E9%97%A8/1856419-9dcbbc148cb4a901.png" alt="1856419-9dcbbc148cb4a901"></p>
<p>​                            图  HTTP报文结构</p>
<h3 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h3><p>无论是请求还响应都会使用首部字段</p>
<blockquote>
<p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容</p>
</blockquote>
<p>HTTP首部字段由首部字段名和首部字段值构成</p>
<blockquote>
<p>例：Content-Type：text/html</p>
<p>字段值可以有多个值</p>
<p>例：Keep-Alive：timeout=15,max=100</p>
</blockquote>
<h3 id="HTTP首部字段类型"><a href="#HTTP首部字段类型" class="headerlink" title="HTTP首部字段类型"></a>HTTP首部字段类型</h3><ul>
<li>通用首部字段<ul>
<li>请求报文和响应报文两方都会使用的首部</li>
</ul>
</li>
<li>请求首部字段<ul>
<li>请求报文首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息</li>
</ul>
</li>
<li>响应首部字段<ul>
<li>响应报文首部。补充了响应的附加内容，也会要去客户端附加额外的内容信息</li>
</ul>
</li>
<li>实体首部字段<ul>
<li>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息</li>
</ul>
</li>
</ul>
<h4 id="End-to-end首部和Hop-by-hop首部"><a href="#End-to-end首部和Hop-by-hop首部" class="headerlink" title="End-to-end首部和Hop-by-hop首部"></a>End-to-end首部和Hop-by-hop首部</h4><p>HTTP首部字段将定义成缓存代理和非缓存代理</p>
<ul>
<li>端到端首部（End-to-end Header）<ul>
<li>首部会转发给请求/响应对应的最终接受目标，且必须保存在由缓存生产的响应中，另外规定它必须被转发</li>
</ul>
</li>
<li>逐跳首部（Hop-by-hop Header）<ul>
<li>首部只对单词转发有效，会因通过缓存或代理而不再转发</li>
</ul>
</li>
</ul>
<h3 id="HTTP通用首部字段"><a href="#HTTP通用首部字段" class="headerlink" title="HTTP通用首部字段"></a>HTTP通用首部字段</h3><p>请求报文和响应报文双方都会使用的首部</p>
<h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>能够控制缓存的行为</p>
<ul>
<li><p>public指令</p>
<ul>
<li>表明其他用户也可利用缓存</li>
</ul>
</li>
<li><p>private指令</p>
<ul>
<li>响应只以特定的用户作为对象</li>
</ul>
</li>
<li><p>no-cache指令</p>
<ul>
<li>防止从缓存中返回过期的资源；</li>
<li>客户端：表示客户端不会接受缓存过的响应，缓存服务器必须把客户端请求转发给源服务器，请求新的资源</li>
<li>服务器：缓存服务器不能对资源进行缓存。源服务器以后将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作</li>
</ul>
</li>
<li><p>控制可执行缓存的对象的指令</p>
<ul>
<li><p>no-store:暗示请求（和对应的响应）或响应中包含机密信息，规定缓存不能在本地存储请求或响应的任一部</p>
</li>
<li><blockquote>
<p>no-cache:不接受过期的资源，并不是不接受缓存</p>
<p>no-store:禁止缓存    </p>
</blockquote>
</li>
</ul>
</li>
<li><p>指定缓存期限和认证的指令</p>
<ul>
<li>s-maxage：与max-age功能相同，不同点在于s-maxage指令适用于供多位用户使用的公共缓存服务器（代理）；使用s-maxage指令后，会忽略对Expires首部字段及max-age指令的处理</li>
<li>max-age:<ul>
<li>客户端：判定缓存资源的缓存时间数值比指定时间的数值更小，则客户端接受缓存的资源，当指定max-age为0时，缓存服务器一般需要将请求转发给源服务器</li>
<li>服务器：缓存服务器将不对资源的有效性确认，max-age数值代表资源保存为缓存的最长时间</li>
<li>存在max-age指令时会忽略掉Expires首部字段</li>
</ul>
</li>
<li>min-fresh:（客户端）要求缓存服务器返回至少还未过指定时间的缓存资源</li>
<li>min-stale：可指定过期时间，在指定的过期时间内，照常接收该缓存资源</li>
<li>only-if-cached：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回</li>
<li>must-revalidate：代理会向源服务器再次验证即将返回的响应缓存目前是否有效<ul>
<li>会忽略请求的max-stale指令</li>
</ul>
</li>
<li>proxy-revalidate：要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性</li>
<li>no-transform：无论是请求还是响应中，缓存都不能改变实体主体的媒体类型（防止缓存或代理压缩图片等操作）</li>
</ul>
</li>
<li><p>Cache-Control扩展</p>
<ul>
<li>cache-extension token：可以扩展Cache-Control首部字段内的指令</li>
</ul>
</li>
</ul>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><ul>
<li>控制不再转发给代理的首部字段<ul>
<li>connection：不再转发的首部字段名</li>
<li>代理服务器将不会再转发connection对应的字段信息</li>
</ul>
</li>
<li>管理持久连接<ul>
<li>HTTP/1.1版本的默认连接都是持久连接（<code>Connection：Keep-Alive</code>）</li>
<li>若想断开连接，则指定<code>Connection：close</code></li>
</ul>
</li>
</ul>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>表明创建HTTP报文的日期和时间</p>
<h4 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h4><ul>
<li><p>规定了传输报文主体时采用的编码方式</p>
</li>
<li><p>HTTP/1.1的传输编码方式仅对分块传输编码有效</p>
</li>
<li><p><code>Transfer-Encoding:chunked</code></p>
</li>
</ul>
<h4 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h4><p>告知用户一些与缓存相关的问题的警告</p>
<table>
<thead>
<tr>
<th>警告码</th>
<th>警告内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>110</td>
<td>Response is stale(响应已过期)</td>
<td>代理返回已过期的资源</td>
</tr>
<tr>
<td>111</td>
<td>Revalidation failed(再验证失败)</td>
<td>代理再验证资源有效性时失败(服务器无法到达等原因)</td>
</tr>
<tr>
<td>112</td>
<td>Disconnection operation(断开连接操作)</td>
<td>代理与互联网连接被故意切断</td>
</tr>
<tr>
<td>113</td>
<td>Heuristic expiration(试探性过期)</td>
<td>响应的试用期超过24小时(有效缓存的设定时间大于24小时的情况下)</td>
</tr>
<tr>
<td>199</td>
<td>Miscellaneous warning(杂项警告)</td>
<td>任意的警告内容</td>
</tr>
<tr>
<td>214</td>
<td>Transformation applied(使用了转换)</td>
<td>代理对内容编码或媒体类型等执行了某些处理时</td>
</tr>
<tr>
<td>299</td>
<td>Miscellaneous persistent warning</td>
<td>任意的警告内容</td>
</tr>
</tbody></table>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><p>请求首部字段是从客户端往服务器端发送请求报文中所使用的字段，用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容</p>
<h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><ul>
<li>Accept首部字段可通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级</li>
<li>优先级用<code>q=</code>来额外表示权重值</li>
<li>当服务器提供多种内容时，将会首先返回权重值最高的媒体类型</li>
</ul>
<h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><ul>
<li>Accept-Charset首部字段可用来通知服务器用户代理支持的字符集及字符集的相对优先顺序</li>
<li>可一次性指定多种字符集，同样可以采用权重q来表示相对优先级</li>
<li>应用于内容协商机制的服务器驱动协商</li>
</ul>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><ul>
<li>Accept-Encoding首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序</li>
<li>可一次性指定多种内容编码，同样可以采用权重q来表示相对优先级</li>
<li><code>*</code>作为通配符，指定任意的编码格式</li>
</ul>
<h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p>Accept-Language用来告知服务器用户代理能够处理的自然语言集以及自然语言集的相对优先级</p>
<p>可一次性指定多种自然语言集，同样可以采用权重q来表示相对优先级</p>
<h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p>用来告知服务器，用户代理的认证信息（证书值）</p>
<blockquote>
<p>即说明客户端访问的页面需要进行认证，服务器会返回401错误，让客户端将认证信息发送给服务器</p>
</blockquote>
<h4 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h4><p><code>Expect：100-continue</code></p>
<ul>
<li>客户端使用首部字段Expect来告知服务器，期望出现的某种特定行为</li>
<li>服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码417Expectation Failed</li>
</ul>
<h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p>用来告知服务器使用用户代理的用户的电子邮件地址</p>
<blockquote>
<p>通常 使用目的就是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式</p>
</blockquote>
<h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>首部字段Host会告知服务器，请求的资源所处的互联网主机名和端口号。Host首部字段在HTTP/1.1规范内是唯一一个必须被包含在请求内的首部字段</p>
<blockquote>
<p>请求被发送至服务器时，请求中的主名会用IP地址直接替换解决；但如果相同的IP地址下部署运行着多个域名，Host的必要性就体现出来了</p>
</blockquote>
<p>若服务器未设定主机名，那直接发送一个空值即可</p>
<h5 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h5><p>形如If-XXX形式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真后，才会执行请求</p>
<blockquote>
<p><code>If-Match：“123456”</code>当与资源<code>ETag</code>值匹配一致时，服务器才会接受请求</p>
<p>当用<code>*</code>指定<code>If-Match</code>的字段值后，服务器会忽略ETag的值，资源存在就处理请求</p>
</blockquote>
<h2 id="局域网、广域网、互联网"><a href="#局域网、广域网、互联网" class="headerlink" title="局域网、广域网、互联网"></a>局域网、广域网、互联网</h2><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><ul>
<li>局域网的缩写是LAN，local area network，顾名思义，是个本地的网络，只能实现小范围短距离的网络通信。</li>
<li>（如下图）我们的家庭网络是典型的局域网。电脑、手机、电视、智能音箱、智能插座都连在无线<a href="https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&spm=1001.2101.3001.7020">路由器</a>上，可以互相通信。</li>
</ul>
<p><img src="/../images/HTTP%E5%85%A5%E9%97%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTQxMzUxMQ==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>
<h3 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h3><ul>
<li>因特网本质上就是把世界各地的局域网连通，咱们刷知乎的时候，知乎那边有个局域网，我们家有个局域网，这两个局域网就是通过因特网连起来的。想要接入因特网，需要向运营商购买1条宽带，电信联通都可以，然后通过这条宽带接入运营商，运营商再接入因特网。<br><img src="/../images/HTTP%E5%85%A5%E9%97%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTQxMzUxMQ==,size_16,color_FFFFFF,t_70-16740309196336.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="广域网（Wan）"><a href="#广域网（Wan）" class="headerlink" title="广域网（Wan）"></a>广域网（Wan）</h3><p>广域网是相对局域网来讲的，局域网的传输距离比较近，只能是一个小范围的。<br>特殊需求</p>
<p>如果需要长距离的传输，比如某大型企业，总部在北京，分公司在长沙，局域网是无法架设的。这时需要通信有三个解决方案。<br>第一，通过因特网，只需要办一根宽带，就实现了通信，非常方便，现在的宽带价格也比较便宜。但是会存在数据泄露的风险，前面讲到了，因特网是一个全球人民都连进来的网，虽说大部分都是好人，但总会有些坏人，特别是商业竞争的情况下，会有黑客坏人连在因特网里盗取各种数据卖钱。所以大型企业、金融单位、各级政府单位，是不放心使用因特网来传输数据的。<br>第二，通过广域网专线。所以为了数据安全，不能连接因特网，需要用一条自己的专用线路来传输数据，这条线路上只有自己人，不会有其他人接入，且距离很远，这个网络就叫 “广域网”广域网的缩写是WAN，Wide Area Network，支持很长距离的传输。这条专线当然不是企业自己搭电线杆架设，而是租用电信联通等运营商架设好的线路，使用费用会比因特网贵很多，带宽也比较小，但是为了安全，就要承担一些必要的成本。<br>第三，通过VPN，VPN是虚拟专用网，是在普通的便宜的因特网上，通过数据加密，完整性验证，身份验证等多种技术手段构建的安全传输网络，实现类似专线的安全功能。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础回顾</title>
    <url>/2023/07/04/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>​            JVM实现？</p>
<span id="more"></span>

<h3 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h3><ul>
<li><p>抽象（继承）</p>
</li>
<li><p>封装（隐藏）</p>
<ul>
<li>public 公有</li>
<li>private 私有</li>
<li>protected 保护</li>
</ul>
</li>
<li><p>复用</p>
</li>
<li><p>多态实现方法？</p>
<ul>
<li>继承</li>
<li>重写 override</li>
<li>重载 overload</li>
</ul>
<p>boy b = new person();    ❌（不可向上转型）</p>
<p>person a = new  boy();   ✔️</p>
</li>
</ul>
<p>万物皆对象，除了基本类型</p>
<blockquote>
<ul>
<li>先执行父类后执行子类，禁止子类转型为父类</li>
<li>new 才是真正在堆上创建出来的对象，所以实际创建出来的类以new 后面的为主</li>
<li>编译的时候并没有检查类型匹配问题，实际运行的时候才会检查</li>
</ul>
</blockquote>
<h3 id="8种基本类型（在栈中分配空间）"><a href="#8种基本类型（在栈中分配空间）" class="headerlink" title="8种基本类型（在栈中分配空间）"></a>8种基本类型（在栈中分配空间）</h3><table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节</td>
<td>-2^7-1~2^7</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-231~231-1</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>float</td>
<td>4字节</td>
<td></td>
<td>0.0</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td></td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>2字节</td>
<td></td>
<td>‘ ‘</td>
</tr>
<tr>
<td>boolean</td>
<td></td>
<td></td>
<td>FALSE</td>
</tr>
</tbody></table>
<p>初始化必须赋默认值，需要在栈中开辟内存空间</p>
<p>double、float、int、long</p>
<blockquote>
<ul>
<li>如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。 </li>
<li>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。</li>
<li>否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。 </li>
<li>否则， 两个操作数都将被转换为 int 类型。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">8.0</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum = a+d;</span><br><span class="line">System.out.println(sum);<span class="comment">//向精度丢失少的一边自动转换</span></span><br></pre></td></tr></table></figure>

<h3 id="数值类型之间合法转换"><a href="#数值类型之间合法转换" class="headerlink" title="数值类型之间合法转换"></a>数值类型之间合法转换</h3><p><img src="/images/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/image-20220529224011469.png" alt="image-20220529224011469"></p>
<blockquote>
<p>从图中我们可以看出存储占用字节少的类型向存储占用字节多的类型转化不会丢失精度（实线），而存储占用字节多的类型向存储占用字节少的类型（包括占用字节一样的类型）转换都可能发生精度丢失（虚线）</p>
</blockquote>
<h4 id="精度丢失问题"><a href="#精度丢失问题" class="headerlink" title="精度丢失问题"></a>精度丢失问题</h4><p>同样用int和float；为什么int可以直接转换成float，而float不能转换成int呢？这是因为float表示的数值范围要比int表示的多，也就是说float中有些数值是int无法表示的，所以float转换成int得强制转换。float转int精度丢失有两种情况：</p>
<ol>
<li>int可以表示该float值（这和int转float精度丢失情况是一样的）</li>
<li>int无法表示float值（int会将该值认为是最大或最小值）</li>
</ol>
<h3 id="深度拷贝与浅拷贝"><a href="#深度拷贝与浅拷贝" class="headerlink" title="深度拷贝与浅拷贝"></a>深度拷贝与浅拷贝</h3><blockquote>
<p>浅拷贝：</p>
<ol>
<li>对于基本数据类型的成员对象，因为基础数据类型是值传递的，所以是直接将属性值赋值给新的对象。基础类型的拷贝，其中一个对象修改该值，不会影响另外一个。</li>
<li>对于引用类型，比如数组或者类对象，因为引用类型是引用传递，所以浅拷贝只是把内存地址赋值给了成员变量，它们指向了同一内存空间。改变其中一个，会对另外一个也产生影响。</li>
</ol>
</blockquote>
<blockquote>
<p>深拷贝：</p>
<p>在拷贝引用类型成员变量时，为引用类型的数据成员另辟了一个独立的内存空间，实现真正内容上的拷贝。</p>
<ol>
<li>对于基本数据类型的成员对象，因为基础数据类型是值传递的，所以是直接将属性值赋值给新的对象。基础类型的拷贝，其中一个对象修改该值，不会影响另外一个（和浅拷贝一样）。</li>
<li>对于引用类型，比如数组或者类对象，深拷贝会新建一个对象空间，然后拷贝里面的内容，所以它们指向了不同的内存空间。改变其中一个，不会对另外一个也产生影响。</li>
<li>对于有多层对象的，每个对象都需要实现 <code>Cloneable</code> 并重写 <code>clone()</code> 方法，进而实现了对象的串行层层拷贝。</li>
<li>深拷贝相比于浅拷贝速度较慢并且花销较大。</li>
</ol>
</blockquote>
<p>可以用ObjectOutputStream方法将类输出，再利用ObjectInputStream方法读入实现对象的深拷贝</p>
<p>native：代表没有使用java代码实现的功能（与操作系统相关的功能），比如用c或者c++实现的功能打包成的功能？？？</p>
<h3 id="与hashcode关系"><a href="#与hashcode关系" class="headerlink" title="==与hashcode关系"></a>==与hashcode关系</h3><p>字符串对象的哈希码根据以下公式计算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s[<span class="number">0</span>]*<span class="number">31</span>^(n-<span class="number">1</span>) + s[<span class="number">1</span>]*<span class="number">31</span>^(n-<span class="number">2</span>) + ... + s[n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<h3 id="与equal-关系"><a href="#与equal-关系" class="headerlink" title="==与equal()关系"></a>==与equal()关系</h3><blockquote>
<p>默认情况下也就是从超类Object继承而来的equals方法与‘==’是完全等价的，比较的都是对象的内存地址，但我们可以重写equals方法，使其按照我们的需求的方式进行比较，如String类重写了equals方法，使其比较的是字符的序列，而不再是内存地址。</p>
</blockquote>
<ul>
<li>equal比较的是内存地址</li>
<li>==比较的仅仅数值上相同</li>
</ul>
<h3 id="Objects源码分析"><a href="#Objects源码分析" class="headerlink" title="Objects源码分析"></a>Objects源码分析</h3><h3 id="Object源码分析"><a href="#Object源码分析" class="headerlink" title="Object源码分析"></a>Object源码分析</h3><h4 id="register"><a href="#register" class="headerlink" title="register()"></a>register()</h4><h4 id="notify-与notifyAll"><a href="#notify-与notifyAll" class="headerlink" title="notify()与notifyAll()"></a>notify()与notifyAll()</h4><h4 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h4><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><h3 id="Integer、Byte、Long、Boolean中优化操作？"><a href="#Integer、Byte、Long、Boolean中优化操作？" class="headerlink" title="Integer、Byte、Long、Boolean中优化操作？"></a>Integer、Byte、Long、Boolean中优化操作？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>; <span class="comment">//缓存下届，不可改变了，只有上届可以改变</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;<span class="comment">//h值，可以通过设置jdk的AutoBoxCacheMax参数调整（以下有解释），自动缓存区间设置为[-128,N]。注意区间的下界是固定 </span></span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);<span class="comment">// 取较大的作为上界，但又不能大于Integer的边界MAX_VALUE</span></span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low));</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>int a = 100, b = 100; </li>
<li>System.out.println(a == b); // true，缓存了 </li>
<li>Integer c = 1000, d = 1000; </li>
<li>System.out.println(c == d); // false，没有缓存，要new </li>
<li>Integer e = -128, f = -128; </li>
<li>System.out.println(e == f); // true，缓存了 </li>
<li>Integer g = -129, h = -129; </li>
<li>System.out.println(g == h); // false，没有缓存，要new </li>
</ol>
<p>IntegerCache 不會有实例，它是 private static class IntegerCache，在 Integer 中都是直接使用其 static 方法 …</p>
</blockquote>
<p>优化操作不同的点：</p>
<p>Float、Double中无优化操作</p>
<p>延时赋值</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>把会变化的部分取出并“封装”起来，让其他部分不受影响</p>
<p>声明的时候优先声明父类的，父类可创建子类的对象，子类无法创建父类的对象</p>
<p>Java默认类中有空的构造器，构造器返回值为自身</p>
<p>Java中赋值遵循就近原则</p>
<p> 注意不要编写返回引用可变对象的访问器方法。</p>
<blockquote>
<p>PS：如果返回了Date对象，Date对象中为可变对象，有setTime方法，会导致对象本身被修改</p>
</blockquote>
<h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul>
<li>依赖(“uses-a”)</li>
<li>聚合(“has-a”)</li>
<li>继承(“is-a”)</li>
</ul>
<h3 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h3><p>final可以用来修饰类、方法、变量</p>
<ol>
<li>修饰类：表明这个类不能被继承，final类中的成员变量可以根据需要设为final，但是final类中的所有成员方法都会隐式地指定为final方法</li>
<li>修饰方法：把方法锁定，以防任何继承类修改它的含义</li>
<li>修饰变量：对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li>
</ol>
<p>用Final修饰的变量只能在初始化的时候赋初值，或者在构造器中赋值</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ul>
<li>线程安全就是<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&spm=1001.2101.3001.7020">多线程</a>访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。 </li>
<li>线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。</li>
</ul>
<h3 id="private、public、protected"><a href="#private、public、protected" class="headerlink" title="private、public、protected"></a>private、public、protected</h3><table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">同一个类</th>
<th align="center">同一个包中</th>
<th align="center">子类</th>
<th align="center">所有类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">private</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">default</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>Main方法相关规定</p>
<h3 id="值调用、引用调用"><a href="#值调用、引用调用" class="headerlink" title="值调用、引用调用"></a>值调用、引用调用</h3><p>基本类型为值调用</p>
<p>对象为引用调用</p>
<ul>
<li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li>
<li>一个方法可以改变一个对象参数的状态。 </li>
<li>一个方法不能让对象参数引用一个新的对象。</li>
</ul>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ol>
<li><p>类变量：独立于方法之外的变量，用 <a href="https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020">static</a> 修饰。</p>
</li>
<li><p>实例变量：声明在类中独立于方法之外的变量，不过没有 static 修饰。</p>
</li>
<li><p>局部变量：类的方法中的变量，在使用前必须初始化（for循环中定义的变量也是局部变量）</p>
</li>
</ol>
<h3 id="栈与堆"><a href="#栈与堆" class="headerlink" title="栈与堆"></a>栈与堆</h3><p>堆、栈都是类簇中，栈是操作系统分配，堆是程序运行时候所分配的</p>
<p>new 出来的对象在堆空间，栈中存储的内存地址，指向堆中的位置</p>
<blockquote>
<p>谈到Java中的栈与堆，就离不开JVM(虚拟机)，Java程序都是运行在JVM上的。</p>
<p>Java程序在运行时都要开辟空间，任何软件在运行时都要在内存中开辟空间，Java虚拟机运行时也是要开辟空间的。JVM运行时在内存中开辟一片内存区域，启动时在自己的内存区域中进行更细致的划分，因为虚拟机中每一片内存处理的方式都不同，所以要单独进行管理。</p>
</blockquote>
<p>JVM内存划分为五部分：</p>
<ol>
<li>寄存器</li>
<li>本地方法区</li>
<li>方法区</li>
<li>栈内存</li>
<li>堆内存</li>
</ol>
<p>栈内存：</p>
<p>​    栈内存是一片内存区域，存储的是局部变量，先加载方法才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，当离开作用域后，变量就会被释放。</p>
<p>堆内存：</p>
<p>​    存储的是对象（数组也算是对象），new建立的都放在堆中，堆中存放的都是实体（对象），实体用于封装数据(对应对象的属性)，如果一个数据消失，不会影响到实体本身，所以堆是不会随时释放的。同时虽然堆里面的实体不会被释放，但是会被当成垃圾，被Java的垃圾回收机制不定时地回收。</p>
<blockquote>
<p>PS：</p>
<p>假设主函数中定义一个数组，  int arr = new int[3];</p>
<p>main函数先进入栈中，在栈中定义一个变量arr，接下来为arr赋值，右边存放的是实体，实体创建在堆里，在堆里首先通过new关键字开辟一个空间，内存在存储数据的时候都是通过地址来体现的，地址是一块连续的二进制，然后给这个实体分配一个内存地址。数组都是有一个索引，数组这个实体在堆内存中产生之后每一个空间都会进行默认的初始化（这是堆内存的特点，未初始化的数据是不能用的，但在堆里是可以用的，因为初始化过了，但是在栈里没有），不同的类型初始化的值不一样。所以堆和栈里就创建了变量和实体：</p>
<p><img src="/2023/07/04/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220211111427900.png" alt="image-20220211111427900"></p>
<p><strong>堆与栈的联系</strong></p>
<p>把堆的地址赋给arr，arr就通过地址指向了数组。所以arr想操纵数组时，就通过地址，而不是直接把实体都赋给它。这种我们不再叫他基本数据类型，而叫引用数据类型。称为arr引用了堆内存当中的实体。</p>
<p><img src="/2023/07/04/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20220211111554742.png" alt="image-20220211111554742"></p>
<p>如果当int [] arr=null;</p>
<p>​    arr不做任何指向，null的作用就是取消引用数据类型的指向。</p>
<p>​    当一个实体，没有引用数据类型指向的时候，它在堆内存中不会被释放，而被当做一个垃圾，在不定时的时间内自动回收</p>
</blockquote>
<p> 所以堆与栈的区别很明显：</p>
<ol>
<li>栈内存存储的是局部变量而堆内存存储的是实体；</li>
<li>栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；</li>
<li>栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。</li>
</ol>
<h3 id="接口与内部类"><a href="#接口与内部类" class="headerlink" title="接口与内部类"></a>接口与内部类</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口不是类，而是对类的一组需求描述，更倾向于一种协议，不能使用new</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Demo1</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> Demo2;<span class="comment">//默认为public，因此可以不写public</span></span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">Demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//实现</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接口中的所有类默认为public，但是在实现接口的时候必须把方法声明为public，否则会被编译器默认为类的默认访问属性(包可见性)</p>
</li>
<li><p>在接口中不能包含实例域或静态方法，但却可以包含常量</p>
</li>
<li><p>与接口中的方法都自动地被设置为 public—样，接口中的域将被自动设为 public static final</p>
</li>
</ul>
<p>自然排序：</p>
<h4 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h4><ul>
<li>抽象类是类，接口不是类</li>
<li>抽象类中可以有具体的方法和属性，只需要至少有一个抽象方法即可</li>
<li>类只能单继承，接口可以多实现</li>
<li>接口不关注功能如何实现，分工明确，抽象类关注</li>
</ul>
<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><h5 id="四种内部类实现方式"><a href="#四种内部类实现方式" class="headerlink" title="四种内部类实现方式"></a>四种内部类实现方式</h5><ol>
<li>一般内部类</li>
<li>局部内部类（定义在方法内部，只对方法内部可见，适用于局部变量的规则）</li>
<li>静态内部类</li>
<li>匿名内部类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> interval, <span class="keyword">boolean</span> beep)</span></span>&#123;</span><br><span class="line">	ActionListener listener = <span class="keyword">new</span> ActionListenerO</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;At the tone, the time is &quot;</span> + <span class="keyword">new</span> DateO)；</span><br><span class="line">	<span class="keyword">if</span> (beep) Toolkit.getDefaultToolkit().beep();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;；</span><br><span class="line">	Timer t = <span class="keyword">new</span> Timer(interval, listener);</span><br><span class="line">	t.start0；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>内部类既可以访问自身的数据域，也可以访问创建它的外围类对象的数据域</p>
<p>内部类往往用于隐藏自身的属性和方法，对于包中其他的类是不可见的</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>私有的构造函数</p>
<p>私有的静态实例变量</p>
<h4 id="四种单例实现模式"><a href="#四种单例实现模式" class="headerlink" title="四种单例实现模式"></a>四种单例实现模式</h4><h5 id="1、懒汉式，线程不安全"><a href="#1、懒汉式，线程不安全" class="headerlink" title="1、懒汉式，线程不安全"></a>1、懒汉式，线程不安全</h5><p><strong>是否 Lazy 初始化：</strong>是</p>
<p><strong>是否多线程安全：</strong>否</p>
<p><strong>实现难度：</strong>易</p>
<p><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2、懒汉式，线程安全"><a href="#2、懒汉式，线程安全" class="headerlink" title="2、懒汉式，线程安全"></a>2、懒汉式，线程安全</h5><p><strong>是否 Lazy 初始化：</strong>是</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>易</p>
<p><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、饿汉式"><a href="#3、饿汉式" class="headerlink" title="3、饿汉式"></a>3、饿汉式</h5><p><strong>是否 Lazy 初始化：</strong>否</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>易</p>
<p><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。<br>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。<br>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#4、双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="4、双检锁/双重校验锁（DCL，即 double-checked locking）"></a>4、双检锁/双重校验锁（DCL，即 double-checked locking）</h5><p><strong>JDK 版本：</strong>JDK1.5 起</p>
<p><strong>是否 Lazy 初始化：</strong>是</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>较复杂</p>
<p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、登记式-静态内部类"><a href="#5、登记式-静态内部类" class="headerlink" title="5、登记式/静态内部类"></a>5、登记式/静态内部类</h5><p><strong>是否 Lazy 初始化：</strong>是</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>一般</p>
<p><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6、枚举"><a href="#6、枚举" class="headerlink" title="6、枚举"></a>6、枚举</h5><p><strong>JDK 版本：</strong>JDK1.5 起</p>
<p><strong>是否 Lazy 初始化：</strong>否</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>易</p>
<p><strong>描述：</strong>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过 reflection attack 来调用私有构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>经验之谈：</strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>
<h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><ul>
<li>修饰代码块，即同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象。</li>
<li>修饰普通方法，即同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。</li>
<li>修饰静态方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</li>
</ul>
<blockquote>
<p><code>Synchronized</code>修饰方法时存在缺陷：若修饰1个大的方法，将会大大影响效率</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">    <span class="comment">// 对象锁：形式1(方法锁) </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;我是对象锁也是方法锁&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            Thread.sleep(<span class="number">500</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 对象锁：形式2（代码块形式） </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123; </span><br><span class="line">            System.out.println(<span class="string">&quot;我是对象锁&quot;</span>); </span><br><span class="line">            <span class="keyword">try</span>&#123; </span><br><span class="line">                Thread.sleep(<span class="number">500</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line"> ｝</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法锁（即对象锁中的形式1）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;我是对象锁也是方法锁&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            Thread.sleep(<span class="number">500</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">　　 <span class="comment">// 类锁：形式1 ：锁静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;我是类锁一号&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            Thread.sleep(<span class="number">500</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 类锁：形式2 ：锁静态代码块</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">synchronized</span> (Test.class)&#123; </span><br><span class="line">            System.out.println(<span class="string">&quot;我是类锁二号&quot;</span>); </span><br><span class="line">            <span class="keyword">try</span>&#123; </span><br><span class="line">                Thread.sleep(<span class="number">500</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line">｝</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol>
<li><p><code>Checked Exception</code></p>
<p>可检查的异常，这是编码时非常常用的，所有checked exception都是需要在代码中处理的。它们的发生是可以预测的，正常的一种情况，可以合理的处理。比如IOException，或者一些自定义的异常。除了RuntimeException及其子类以外，都是checked exception。</p>
</li>
<li><p><code>Unchecked Exception</code></p>
<p>RuntimeException及其子类都是unchecked exception。比如NPE空指针异常，除数为0的算数异常ArithmeticException等等，这种异常是运行时发生，无法预先捕捉处理的。Error也是unchecked exception，也是无法预先处理的。</p>
</li>
</ol>
<p>finally：只要进入了try，catch代码块中，finally中的内容必定会被执行（System.exit(0)）可以导致不执行finally</p>
<p>catch中不允许存在空行，需要用log形式将error打印出来</p>
<p>不能在异常中处理业务</p>
<p>try catch 返回情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般写法</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在括号中写需要打开资源的代码，在处理完后会自动关闭资源</span></span><br><span class="line"><span class="comment">//必须要实现了AutoCloseable的方法才能实现自动关闭</span></span><br><span class="line"><span class="keyword">try</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>字节流与字符流</p>
<p>mark与pos</p>
<p>StringBuffer</p>
<p>BufferInputStream</p>
<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>设计原则：类应该对扩展开放，对修改关闭</p>
<p>提供更好的组合能力</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//DataInputStream.java</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*short有两个字节，因此需要判断两个字节均不小于0的情况，一般的read方法实现均采用了byte定义，因此可以只判断一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">short</span> <span class="title">readShort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ch1 = in.read();</span><br><span class="line">        <span class="keyword">int</span> ch2 = in.read();</span><br><span class="line">        <span class="keyword">if</span> ((ch1 | ch2) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">short</span>)((ch1 &lt;&lt; <span class="number">8</span>) + (ch2 &lt;&lt; <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus</title>
    <url>/2023/07/04/Mybatis-Plus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot整合MybatisPlus，这个依赖只有在SpringBoot项目中才需要导入，其他项目无需导入这个依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatisPlus依赖，要使用MyBatisPlus就必须导入MyBatisPlus的依赖，因为MyBatisPlus中默认有MyBatis的依赖，所以无需再导入MyBatis的依赖了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis代码生成器依赖，要使用代码生成器，就需要导入代码生成器依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Mybatis-plus是在Mybatis基础上进行的升级，在导入依赖的时候仅导入Mybatis-plus即可，避免因版本不一致导致冲突</p>
<blockquote>
<p><strong>mybatis-plus 和 mybatis-plus-boot-starter 的主要异同点就在于</strong>：</p>
<p><strong>mybatis-plus-boot-starter将xml中basemap中定义的id全部已经实现了，</strong></p>
<p><strong>而mybatis-plus这个包还需要自己实现basemap中的定义。</strong></p>
</blockquote>
<h3 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h3><h4 id="insert插入"><a href="#insert插入" class="headerlink" title="insert插入"></a>insert插入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = userDao.insert(<span class="keyword">new</span> User(<span class="number">7</span>,<span class="number">22</span>,<span class="string">&quot;dd&quot;</span>,<span class="string">&quot;6@1.com&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(res&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>主键生成策略</strong></p>
<blockquote>
<p>默认ASSIGN_ID全局唯一id</p>
</blockquote>
<p>雪花算法（SnowFlake）</p>
<p><img src="/../images/Mybatis-Plus/image-20230320100831527.png" alt="image-20230320100831527"></p>
<p>雪花算法的原理就是生成一个的 64 位比特位的 long 类型的唯一 id。</p>
<ul>
<li>最高 1 位固定值 0，因为生成的 id 是正整数，如果是 1 就是负数了。</li>
<li>接下来 41 位存储毫秒级时间戳，2^41/(1000<em>60</em>60<em>24</em>365)=69，大概可以使用 69 年。</li>
<li>再接下 10 位存储机器码，包括 5 位 datacenterId 和 5 位 workerId。最多可以部署 2^10=1024 台机器。</li>
<li>最后 12 位存储序列号。同一毫秒时间戳时，通过这个递增的序列号来区分。即对于同一台机器而言，同一毫秒时间戳下，可以生成 2^12=4096 个不重复 id。</li>
</ul>
<blockquote>
<p>主键自增</p>
</blockquote>
<ol>
<li>实体类字段上<code>@TableId（type = IdType.AUTO)</code></li>
<li>数据库字段必须为自增</li>
</ol>
<p><strong>源码分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),<span class="comment">//数据库id自增</span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//未设置主键</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//手动输入</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),<span class="comment">//默认的全局唯一id</span></span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>);<span class="comment">//全局唯一id  uuid</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IdType</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user  = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">4</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;test22&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">55</span>);</span><br><span class="line">    <span class="keyword">int</span> res = userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志分析</p>
<p><img src="/../images/Mybatis-Plus/image-20230320105002291.png" alt="image-20230320105002291"></p>
<p><strong>自动填充</strong></p>
<p>创建时间、修改时间都是自动化完成的，尽量避免手动更新</p>
<blockquote>
<p>数据库层级</p>
</blockquote>
<p>在数据库中勾选<code>更新</code>，并设置默认值即可</p>
<p><img src="/../images/Mybatis-Plus/image-20230320171443249.png" alt="image-20230320171443249"></p>
<blockquote>
<p>代码层级</p>
</blockquote>
<p>1.清空数据库相关信息</p>
<p><img src="/../images/Mybatis-Plus/image-20230320171617518.png" alt="image-20230320171617518"></p>
<p>2.新增注解<code>@TableField</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    Integer id ;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.实现拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.runtime.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MymetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill......&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><blockquote>
<p>乐观锁：对数据的操作持乐观态度，即对数据进行操作时不会上锁，只会在更新数据检查数据是否有变动，往往采用版本号机制（Vsersion）或者CAS（Compare And Swap），在对数据库进行更新时，会先查询出当前version信息，提交事务时会再次检验version是否与查询时的版本一致，若一致则提交，否则不进行处理</p>
<p>悲观锁：对数据的操作持悲观态度，每次对数据进行操作的时候都会上锁，在操作完成前其他线程将无法访问数据库，容易造成资源堵塞</p>
<p>具体乐观锁及悲观锁介绍可参见：</p>
<p><a href="https://blog.csdn.net/qq_34337272/article/details/81072874">https://blog.csdn.net/qq_34337272/article/details/81072874</a></p>
</blockquote>
<p>1.数据库新增version（默认值为1）</p>
<p><img src="/../images/Mybatis-Plus/image-20230328174304516.png" alt="image-20230328174304516"></p>
<p>2.pojo新增对应字段version</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line">Integer version;</span><br></pre></td></tr></table></figure>

<p>3.配置config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis-plus拦截器配置</span></span><br><span class="line"><span class="comment"> * MybatisPlusConfig.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    voidtestSelectPage()&#123;</span><br><span class="line">        <span class="comment">//1 创建IPage分页对象,设置分页参数,1为当前页码，3为每页显示的记录数</span></span><br><span class="line">        IPage&lt;User&gt;page=newPage&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2 执行分页查询</span></span><br><span class="line">        userDao.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//3 获取分页结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前页码值：&quot;</span>+page.getCurrent());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页显示数：&quot;</span>+page.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少页：&quot;</span>+page.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少条数据：&quot;</span>+page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;数据：&quot;</span>+page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><blockquote>
<p>物理删除：从数据库中直接删除</p>
<p>逻辑删除：数据库中不删除，通过一个变量来控制是否失效</p>
</blockquote>
<p>1.数据库新增deleted（删除标识符）</p>
<p><img src="/../images/Mybatis-Plus/image-20230328174456613.png" alt="image-20230328174456613"></p>
<p>2.配置项目yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤3)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<p>3.pojo新增字段deleted</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line">  Integer deleted;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际实现是在执行删除操作时替换为更新操作，并将deleted值更新为1（代表已删除）</p>
<p>删除后无法查询到相关数据（会默认新增条件，对于deleted值进行判断，deleted=0才可查询到（如图2）</p>
</blockquote>
<p>图1：</p>
<p><img src="/../images/Mybatis-Plus/image-20230329154326839.png" alt="image-20230329154326839"></p>
<p>图2：</p>
<p><img src="/../images/Mybatis-Plus/image-20230329154358553.png" alt="image-20230329154358553"></p>
<h4 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>).ge(<span class="string">&quot;age&quot;</span>,<span class="number">55</span>);</span><br><span class="line">    userDao.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote>
<p><a href="https://baomidou.com/">https://baomidou.com/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Java,Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入门</title>
    <url>/2023/07/04/Linux%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><ol>
<li><p>作为可执行程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ./test.sh #使脚本具有执行权限</span><br><span class="line">./test.sh #执行脚本</span><br></pre></td></tr></table></figure>

<p>需要先cd到对应的目录，否则会报错找不到对应的文件</p>
<span id="more"></span></li>
<li><p>作为解释器参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><blockquote>
<p>命名规则</p>
<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线 _</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=&quot;yr&quot;</span><br><span class="line">str=&quot;name is $&#123;name&#125;&quot;#双引号中可以带有变量</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> name is yr</span></span><br><span class="line">str1=&#x27;name is $&#123;name&#125;&#x27;#单引号会直接将内容直接输出.</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> name is <span class="variable">$&#123;name&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>变量{}可以不加</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2023/07/04/Nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP?fromModule=lemma_inlink">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488?fromModule=lemma_inlink">反向代理</a>web服务器 ，同时也提供了IMAP/POP3/SMTP服务。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p><img src="/../images/Nginx/image-20230301002945031.png" alt="image-20230301002945031"></p>
<p>代理又分为<code>正向代理</code>和<code>反向代理</code></p>
<span id="more"></span>

<h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>反向代理，指的是浏览器/客户端并不知道自己要访问具体哪台目标服务器，只知道去访问代理服务器 ，代理服务器再通过反向代理 +负载均衡实现请求分发到应用服务器的一种代理服务。</p>
<p>反向代理服务的特点是代理服务器 代理的对象是应用服务器，也就是对于浏览器/客户端 来说应用服务器是隐藏的。</p>
<p><img src="/../images/Nginx/image-20230301003002673.png" alt="image-20230301003002673"></p>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>nginx不仅可以做反向代理，还能用作正向代理来进行上网等功能。如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理（也就是大家常说的，通过正向代理进行上网功能）,代理的对象是客户端。</p>
<p><img src="/../images/Nginx/image-20230301003017782.png" alt="image-20230301003017782"></p>
<h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><p><strong>（1）基于轮询的算法</strong></p>
<p>原理是每一个请求按时间顺序逐一被分发到不同的应用服务器，如果接收请求的应用服务器挂了，并且请求超过最大失败次数max_fails（1次），则在失效时间fail_timeout（10秒）内不会再转发请求到该节点</p>
<p><strong>（2）基于权重的算法（一般采用该算法）</strong></p>
<p>原理是每一个请求按权重被分发到不同的应用服务器，同样，如果接收请求的应用服务器挂了，并且请求超过最大失败次数max_fails（默认1次或可设置N次），则在失效时间fail_timeout（默认10秒，可设置N秒）内，不会再转发请求到该节点</p>
<p><strong>（3）基于<code>ip_hash</code>的算法</strong></p>
<p>原理是每一个请求按用户访问IP的哈希结果分配，如果请求来自同一个用户IP则固定这台IP访问一台应用服务器，该算法可以有效解决动态网页中存在的session共享问题。但是当服务器宕机后，还是会导致所存储的session丢失，因此一般还是采用redis的方案解决session问题。</p>
<p><strong>（4）最小连接数</strong></p>
<p>最小连接数法是根据服务器当前的连接情况进行<a href="https://so.csdn.net/so/search?q=%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&spm=1001.2101.3001.7020">负载均衡</a>的，当请求到来时，会选取当前连接数最少的一台服务器来处理请求。由此也可以延伸出，根据服务器 CPU 占用最少，根据单位时间内处理请求的效率高低等进行服务器选择。</p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>利用Nginx的反向代理功能实现动静分离。请求需要后台处理的（动态资源），不需要后台处理的（静态资源），让动态网站里的动态网页根据一定规则把静态资源和动态资源区分开来，可以根据静态资源的特点将其做缓存操作，提高资源响应速度</p>
<h3 id="Nginx目录"><a href="#Nginx目录" class="headerlink" title="Nginx目录"></a>Nginx目录</h3><p><img src="/../images/Nginx/image-20230206173247774.png" alt="image-20230206173247774"></p>
<p>nginx进程在sbin目录下</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote>
<p>./nginx #启动nginx进程</p>
<p>nginx -s reopen #重启Nginx</p>
<p>nginx -s reload #重新加载Nginx配置文件，然后以优雅的方式重启Nginx</p>
<p>nginx -s stop #强制停止Nginx服务</p>
<p>nginx -s quit #安全停止Nginx服务（即处理完所有请求后再停止服务）</p>
<p>nginx -t -c /path/to/nginx.conf 测试<a href="https://so.csdn.net/so/search?q=nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&spm=1001.2101.3001.7020">nginx配置文件</a>是否正确</p>
<p>nginx -v #显示版本信息并退出</p>
<p>killall nginx #杀死所有nginx进程</p>
</blockquote>
<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>nginx.conf</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">全局配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> &#123;</span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">1024</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">http</span> &#123;</span><br><span class="line">	<span class="string">http配置</span></span><br><span class="line">	</span><br><span class="line">	<span class="string">upstream</span> <span class="string">proxyname</span>&#123;</span><br><span class="line">		<span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="string">weight=1</span></span><br><span class="line">		<span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8081</span> <span class="string">weight=1</span></span><br><span class="line">		<span class="comment">#负载均衡配置</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="string">server</span> &#123;</span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">        <span class="comment">#代理</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">location</span>&#123;</span><br><span class="line">        	<span class="string">root</span> <span class="string">html;</span></span><br><span class="line">        	<span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">        	<span class="string">proxy_pass</span> <span class="string">http://proxyname;</span></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="string">server</span> &#123;</span><br><span class="line">        <span class="string">listen</span>      <span class="number">443</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">        <span class="comment">#代理</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体配置详情可参考：</p>
<p><a href="https://blog.csdn.net/u011262253/article/details/120941175">https://blog.csdn.net/u011262253/article/details/120941175</a></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2023/07/04/Mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>导入方式</p>
<span id="more"></span>

<ul>
<li><p>maven仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github：<a href="https://github.com/mybatis-3/releases">https://github.com/mybatis-3/releases</a></p>
</li>
</ul>
<h3 id="持久化（动词）"><a href="#持久化（动词）" class="headerlink" title="持久化（动词）"></a>持久化（动词）</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（jdbc),io文件持久化</li>
</ul>
<h3 id="持久层（名词）"><a href="#持久层（名词）" class="headerlink" title="持久层（名词）"></a>持久层（名词）</h3><p>Dao层、Service层、Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="Mybatis优点"><a href="#Mybatis优点" class="headerlink" title="Mybatis优点"></a>Mybatis优点</h3><ul>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
<h2 id="Hello，Mybatis！"><a href="#Hello，Mybatis！" class="headerlink" title="Hello，Mybatis！"></a>Hello，Mybatis！</h2><blockquote>
<p>步骤：搭建环境-&gt;导入Mybatis-&gt;编写代码-&gt;测试</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`;</span><br><span class="line">#创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>)</span><br><span class="line">ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line">#插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王二&#x27;</span>,<span class="string">&#x27;12345&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p><img src="/../images/Mybatis/image-20211129154958031.png" alt="image-20211129154958031"></p>
<p><strong>配置xml</strong></p>
<blockquote>
<ul>
<li>url：连接数据库，可能会涉及到时区问题，需要与数据库的时区保持一致</li>
<li>每一个Mapper.xml都需要在配置文件中注册</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xml配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments:配置连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        default：设置默认使用的环境的id，一般一个项目只能选择使用一个环境</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：设置一个具体的连接数据库的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            id：设置环境的唯一标识，不能重复</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务管理器</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                type：设置事务管理的方式</span></span><br><span class="line"><span class="comment">                type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                JDBC：表示使用JDBC中原生的事务管理方式</span></span><br><span class="line"><span class="comment">                MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：设置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="line"><span class="comment">                POOLED：表示使用数据库连接池</span></span><br><span class="line"><span class="comment">                UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入mybatis的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写util工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*Util工具类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//mybatis配置文件</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">             sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*UserDao</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接口实现类</p>
<blockquote>
<ul>
<li>namespace：绑定一个对应的Dao/Mapper</li>
<li>select id：绑定类中对应的方法，相当于用数据库语句实现了接口中的方法</li>
<li>resultType：对应返回值的类型</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserMapper.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.MizuGo.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select *from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步，获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//方式一：getMapper</span></span><br><span class="line">        <span class="comment">//getMapper映射Dao接口</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CURD（增删改查）"><a href="#CURD（增删改查）" class="headerlink" title="CURD（增删改查）"></a>CURD（增删改查）</h2><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><ul>
<li>select id:方法名</li>
<li>ResultType:返回值类型</li>
<li>ParamType:参数类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByID&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByID</span><span class="params">()</span></span>&#123;</span><br><span class="line">	SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">	UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    </span><br><span class="line">	User user = userDao.getUserByID(<span class="number">3</span>);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = userDao.addUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;112233&quot;</span>));</span><br><span class="line">    <span class="comment">//增删改提交事务才能够在数据库中生效</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>万能的Map</strong></p>
<blockquote>
<p>PS:这种新增方式有个弊端，当字段过多的时候同样需要人为地一个一个全部添加，极其麻烦，因此在实际的运用中，可能会采用Map的办法。</p>
<p>如下：可实现仅对应id插入密码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过Map查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id,pwd) values (#&#123;userid&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    </span><br><span class="line">   Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;13258&quot;</span>);</span><br><span class="line">    userDao.addUser2(map);</span><br><span class="line">    </span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>父类的引用指向子类的对象的好处：多态、动态链接，向上转型</p>
<ol>
<li>Map&lt;String, Object&gt; map = new HashMap&lt;String,Object&gt;();</li>
<li>HashMap&lt;String, Object&gt; map = new HashMap&lt;String,Object&gt;();</li>
</ol>
<p>Map为HashMap的父类</p>
<p>第一种声明方式更加灵活，当添加新的子类的时候，不用再修改</p>
<p>第二种声明方式当需要实例化其他的子类，需要重新修改</p>
<p>当前面已经声明尖括号类型，后面尖括号中的内容可以省略</p>
</blockquote>
<ul>
<li>Map传递参数，直接在sql中取出key即可     [parameterType=”map”]</li>
<li>对象传递参数，直接在sql中取对象的属性即可  [parameterType=”Object”]</li>
<li>只有一个基本类型参数的情况下，可以直接在sql中取到，省略参数类型</li>
<li>多个参数用Map，或者注解</li>
</ul>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update  mybatis.user set name = #&#123;name&#125;,pwd =#&#123;pwd&#125; where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    </span><br><span class="line">    userDao.updateUser(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;改&quot;</span>,<span class="string">&quot;987654&quot;</span>));</span><br><span class="line">    <span class="comment">//上传事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">    userDao.deleteUser(<span class="number">4</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ol>
<li><p>在sql语句使用通配符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> mybatis.user <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%&quot;#&#123;<span class="keyword">value</span>&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>Java执行语句中使用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; list = UserDao.likeUser(<span class="string">&quot;王%&quot;</span>)；</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模糊查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;likeUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select *from mybatis.user where name like #&#123;value&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">likeUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = userDao.likeUser(<span class="string">&quot;王%&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h3><p><strong>db.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">981218</span></span><br></pre></td></tr></table></figure>

<p><strong>mybatis-config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二步读取，将相关配置连接到db.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--首先读取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;username&quot;</span> <span class="attr">value</span> = <span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定事务管理的类型，分为JDBC和MANAGED两种，往往使用JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource 指连接源配置，POOLED是JDBC连接对象的数据源连接池的实现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--第三步读取--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p>
<ul>
<li>首先读取在 properties 元素体内指定的属性。</li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li>
<li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li>
</ul>
</blockquote>
<h3 id="类型别名-typeAliases"><a href="#类型别名-typeAliases" class="headerlink" title="类型别名(typeAliases)"></a>类型别名(typeAliases)</h3><ol>
<li><p>第一种方式，直接设置缩写名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.MizuGo.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二种方式，指定一个包名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.MizuGo.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认将类名作为缩写名，大小写均可，推荐小写</p>
<blockquote>
<p>类比较少的时候推荐第一种，类多选择第二种</p>
<p>两种方式都可以自定义别名，第二种方式需要在实体类用注解的方式自定义别名</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><table>
<thead>
<tr>
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td>未设置</td>
</tr>
<tr>
<td>cacheEnabled</td>
<td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td>true | false</td>
<td>false</td>
</tr>
</tbody></table>
<h3 id="映射器-Mappers"><a href="#映射器-Mappers" class="headerlink" title="映射器(Mappers)"></a>映射器(Mappers)</h3><ol>
<li><p>使用相对于类路径的资源引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用映射器接口实现类的完全限定类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.MizuGo.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将包内的映射器接口实现全部注册为映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.MizuGo.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>第二种方式和第三种方式注意点：</p>
<ul>
<li>接口和Mapper配置文件必须同名</li>
<li>接口和Mapper配置文件必须在同一个包下</li>
</ul>
<h3 id="作用域（Scope）和生命周期"><a href="#作用域（Scope）和生命周期" class="headerlink" title="作用域（Scope）和生命周期"></a>作用域（Scope）和生命周期</h3><p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>作用域：方法作用域（局部方法变量）</li>
</ul>
<p><strong>SqlSessionFactory</strong></p>
<ul>
<li> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li>
<li>作用域：应用作用域（全局变量）</li>
<li>单例模式或者静态单例模式</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的</li>
<li>作用域：请求或方法作用域</li>
<li>用完后需要断开，否则会造成资源浪费</li>
</ul>
<p><img src="/../images/Mybatis/image-20211201110043411.png" alt="image-20211201110043411"></p>
<blockquote>
<p>PS：</p>
<ul>
<li>SqlSessionFactoryBuilder用于创建SqlSessionFactory</li>
<li>SqlSessionFactory用于创建SqlSession</li>
<li>SqlSession用于创建Mapper，一一对应</li>
</ul>
</blockquote>
<h3 id="结果集映射-ResultMap"><a href="#结果集映射-ResultMap" class="headerlink" title="结果集映射(ResultMap)"></a>结果集映射(ResultMap)</h3><p>解决列名不匹配问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select  * from mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定的resultMap需要与id对应</p>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;limitUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select*from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>limit第一个参数表示开始查询的下标，第二个参数表示需要查询的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">limitUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; list = userDao.limitUser(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p><strong>关于接口的理解</strong></p>
<ul>
<li><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离</p>
</li>
<li><p>接口的本身反应了系统设计人员对系统的抽象理解</p>
</li>
<li><p>接口应有两类</p>
<ul>
<li>第一类是对一个个体的抽象，可对应为一个抽象体（abstract class）</li>
<li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）</li>
</ul>
</li>
<li><p>一个个体可能有多个抽象面，抽象体与抽象面是有区别的</p>
</li>
</ul>
<p><strong>三个面向区别</strong></p>
<ul>
<li>面向对象：以对象为单位，考虑它的属性及方法</li>
<li>面向过程：以一个具体的流程为单位，考虑它的表现</li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现的是对系统整体的架构</li>
</ul>
<h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><p>1.注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* UserDao.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select *from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>2.核心文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.MizuGo.dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java,Myba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot入门</title>
    <url>/2023/07/04/Spring-Boot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><blockquote>
<p>约定大于配置</p>
</blockquote>
<h3 id="简单步骤"><a href="#简单步骤" class="headerlink" title="简单步骤"></a>简单步骤</h3><ol>
<li>建立实体类，跟数据库表字段保持一致</li>
<li>建立mapper接口，定义要操作数据库的动作</li>
<li>建立mapper的xml文件，写具体的sql语句</li>
<li>建立service类，处理业务逻辑</li>
<li>在controller类中展示处理的结果</li>
</ol>
<span id="more"></span>

<h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><h4 id="Spring-Boot-1"><a href="#Spring-Boot-1" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><ol>
<li>Spring Boot是什么</li>
<li>配置如何编写（yml）</li>
<li><strong>自动装配原理</strong></li>
<li>集成web开发：业务核心</li>
<li>集成 数据库 Druid</li>
<li>分布式开发：Dubbo+zookeeper</li>
<li>swagger:接口文档</li>
<li>任务调度</li>
<li>SpringSecurity：Shiro</li>
</ol>
<h4 id="Springcloud"><a href="#Springcloud" class="headerlink" title="Springcloud"></a>Springcloud</h4><ol>
<li>微服务</li>
<li>springcloud入门</li>
<li>Restful</li>
<li>Eureka</li>
<li>Ribbon</li>
<li>Feign</li>
<li>HyStrix</li>
<li>Zuul路由网关</li>
<li>SpringCloud config：git</li>
</ol>
<h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>微服务的基本思想在于考虑围绕着业务领域组件来创建应用，这些应用可独立地进行开发、管理和加速。在分散的组件中使用微服务云架构和平台，使部署、管理和服务功能交付变得更加简单。</p>
<p>微服务不需要像普通服务那样成为一种独立的功能或者独立的资源</p>
<h3 id="初步认识RequestMapping"><a href="#初步认识RequestMapping" class="headerlink" title="初步认识RequestMapping()"></a>初步认识RequestMapping()</h3><p>使用于Controller层</p>
<ol>
<li><p>基础用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span><span class="comment">//相当于请求hello()方法需要访问/index/hello地址，且只接受请求方式为GET的方式</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success.jsp&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>@RequestMapping(&quot;/index&quot;)</code>等同于<code>@RequestMapping(value = &quot;/index&quot;)</code></p>
</blockquote>
</li>
<li><p>映射多个地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/hello&quot;, &quot;/world&quot;, &quot;/helloworld&quot;&#125;)</span><span class="comment">//可以同时将多个请求映射到一个方法上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>URL模板</p>
<blockquote>
<p>使用 <code>@PathVariable</code> 可以获取到 <strong>{name}</strong> 的值，并在控制台进行输出。比如请求地址为：</p>
<p><a href="http://localhost:8080/hello/jack">http://localhost:8080/hello/jack</a> 那么控制台上将会把 <strong>jack</strong> 进行输出。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span>&#123;</span><br><span class="line">        System.out.print(name);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h3><p>以前的配置文件大多是用xml来配置；</p>
<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#key-value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">yurui</span></span><br><span class="line"><span class="comment">#对象:</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">yurui</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">yurui</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#行内写法 </span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>

<h3 id="给属性赋值的几种方式"><a href="#给属性赋值的几种方式" class="headerlink" title="给属性赋值的几种方式"></a>给属性赋值的几种方式</h3><p>1.直接在需要赋值的属性注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*Dog.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在yaml文件中注入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yaml</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无论哪种办法都需要使用注解Autowired完成注入操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h3 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span><span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Email</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用@validated注解对属性进行校验，当属性注入的值与校验的格式不符合则会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Email(message = &quot;error&quot;)</span></span><br></pre></td></tr></table></figure>

<p>注解中可以填入参数信息，用于报错提示</p>
<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>可以在yaml配置文件中配置多套环境，用—隔开，但是并不推荐在同一个文件中配置多套环境，不便于维护</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选择环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span></span><br><span class="line">	<span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h3 id="Srping-Boot配置（暂缺）"><a href="#Srping-Boot配置（暂缺）" class="headerlink" title="Srping Boot配置（暂缺）"></a>Srping Boot配置（暂缺）</h3><h3 id="Srping-Web开发"><a href="#Srping-Web开发" class="headerlink" title="Srping Web开发"></a>Srping Web开发</h3><ul>
<li>导入静态资源</li>
<li>首页</li>
<li>JSP文件，模板引擎Thymeleaf</li>
<li>装配扩展SrpignMVC</li>
<li>增删改查CURD</li>
<li>拦截器</li>
<li>国际化</li>
</ul>
<h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223833103.png" alt="image-20220529223833103"></p>
<p>默认配置可以读到public、resources、static、templates文件夹下的文件，成为静态资源目录</p>
<blockquote>
<p>因此，我们可以通过访问<a href="http://localhost:8080/1.js%E7%9B%B4%E6%8E%A5%E6%9F%A5%E7%9C%8B%E5%88%B0js%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF">http://localhost:8080/1.js直接查看到js文件信息</a></p>
</blockquote>
<p><strong>优先级</strong></p>
<p>resources&gt;static(默认)&gt;public</p>
<blockquote>
<p>一般来说，public存放公共资源、static存放图片、resources存放上传的文件</p>
</blockquote>
<p><strong>处理静态资源存放</strong></p>
<ul>
<li>webjars <code>localhost:8080/webjars</code></li>
<li>public、static、resources、/** <code>localhost:8080/</code></li>
</ul>
<h4 id="首页配置"><a href="#首页配置" class="headerlink" title="首页配置"></a>首页配置</h4><p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223807693.png" alt="image-20220529223807693"></p>
<p>首页默认名为<code>index.html</code></p>
<p>可将此文件置于public、resources、static、templates目录下，或者置于resources根目录下，会被自动配置</p>
<h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p>导入<code>thymeleaf</code>包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thymeleaf包导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模板默认路径位于<code>templates</code>目录下，可识别后缀为<code>.html</code>的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223750889.png" alt="image-20220529223750889"></p>
<p>通过返回文件名访问到html页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*IndexController.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>mode.addattribute()</code></p>
<p>往前端传数据，也可以传对象</p>
<p><code>addAttribute(name,value,ns)</code></p>
<p>name:属性名称（必需）</p>
<p>value:属性的值（可选）</p>
<p>ns:属性的命名空间（可选）</p>
</blockquote>
<p>1.后端通过model往前端传输数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*IndexController.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,springboot&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.前端引入<code>thymeleaf</code>模板，并采用th:text=”${}”来取得数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--test.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Thymeleaf语法</p>
<blockquote>
<p>Thymeleaf语法</p>
<p>${…}获取变量</p>
<p>@{…}链接网址</p>
<p>#{…}消息表达式，与th:text一起使用，加载数据源中的消息，用于国际化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello,springboot&lt;h1&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223713196.png" alt="image-20220529223713196"></p>
<p><strong>遍历元素</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--两种方式效果相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[ $&#123;user&#125; ]]<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;yr&quot;</span>,<span class="string">&quot;666&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>用<code>model.addAttribute()</code>将数组的值传到前台，前台中用${}取得值，<code>th:each</code>遍历数组的值并存入<code>user</code>,最后用<code>th:text</code>展示出来</p>
<h4 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h4><blockquote>
<p>使用<code>WebMvcConfigurerAdapter</code>可以来扩展SpringMVC功能</p>
<p><code>@EnableWebMvc</code>不要接管SpringMVC</p>
</blockquote>
<p>引入模板时需要注意路径是否有误，将静态资源用thymeleaf接管</p>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><ol>
<li>编写国际化配置文件</li>
<li>使用ResourceBundleMessageSource管理国际化资源文件</li>
<li>在页面使用fmt:message取出国际化内容</li>
</ol>
<p><strong>创建国家化配置文件</strong></p>
<p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529222943560.png" alt="image-20220529222943560"></p>
<blockquote>
<p>当Spring Boot自动识别并合并成Resource Bundle后，可直接右键创建新的配置文件</p>
</blockquote>
<p><img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223318621.png" alt="image-20220529223318621"></p>
<ol>
<li><p>选中Resource Bundle页面（需要下载Resource Bundle Editor插件) <img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223451112.png" alt="image-20220529223451112"></p>
</li>
<li><p>新增需要国际化的字段               !<img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223516356.png" alt="image-20220529223516356"></p>
</li>
<li><p>在对应方框中填入对应的配置内容                       <img src="/images/Spring-Boot%E5%85%A5%E9%97%A8/image-20220529223537065.png" alt="image-20220529223537065">  </p>
</li>
<li><p>用thymeleaf替换页面中需要国家化的字段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--login.html--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>原理：国际化Locale(区域信息对象)；LocaleResolver（获取区域信息对象）</p>
<p>默认的是根据请求头带来的区域信息获取Locale进行国际化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;localeResolver&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.WebProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.webProperties.getLocale());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">        localeResolver.setDefaultLocale(<span class="keyword">this</span>.webProperties.getLocale());</span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现点击按钮切换语言</strong></p>
<ol>
<li><p>点击按钮切换页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>login.html(l=&#39;zh_CN&#39;)</code>括号中的信息会作为html的参数显示出来</p>
</blockquote>
</li>
<li><p>实现自己的LocaleResolver配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyLocaleResolver.java</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);<span class="comment">//由于Locale从请求头获取区域信息，因此我们在login.html中将相关区域信息放到了html参数中</span></span><br><span class="line">        Locale locale = Locale.getDefault();<span class="comment">//默认区域信息配置</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;  <span class="comment">//判断维哪个区域的信息</span></span><br><span class="line">            String[] split = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">           locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在配置文件中完成配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* MyMvcConfig.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/login.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>开发期间模板引擎页面修改以后，实时生效</p>
<ol>
<li><p>禁用模板引擎</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>页面修改完成以后ctrl+f9:重新编译</p>
</li>
</ol>
<p><strong>接受数据流程</strong></p>
<p>采用<code>action</code>将表单信息传到<code>/user/login</code>接口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--input接受表单中上传的信息，name表示上传信息的属性名，placeholder为未输入字符时的提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>   <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>登录接口实现</p>
<blockquote>
<p><code>@RequestParam()</code>可以限定参数必须有值，否则会报错</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  LoginController.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Map&lt;String,Object&gt; map,HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//防止表单重复提交，重定向</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;<span class="comment">//成功则返回main页面，由于在配置中做了页面映射，实际会返回dashboard.html页面</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录错误消息显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--判断--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h4><p>为了防止未经过登录直接访问到页面内容，使用拦截器进行登录检查</p>
<ol>
<li><p>创建拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);<span class="comment">//获取从LoginContrller传来的session</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登录，返回登录页面</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无权限，请先登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/login.html&quot;</span>).forward(request,response);<span class="comment">//将请求转到其他页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登录，返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在配置文件中完成配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>);<span class="comment">//“/**”代表全部请求</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="CRUD-员工列表"><a href="#CRUD-员工列表" class="headerlink" title="CRUD-员工列表"></a>CRUD-员工列表</h4><p><strong>RestfulCRUD:CRUD满足Rest风格</strong></p>
<p>URI：/资源名称/资源标识    HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD(uri来区分操作)</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp–GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp–POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}–PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}–DELETE</td>
</tr>
</tbody></table>
<p><strong>实验的请求架构</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工{来到修改页面}</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面(查出员工进行信息回显)</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>修改页面</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/{id}</td>
<td>DELETE</td>
</tr>
</tbody></table>
<h5 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取公共片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入公共片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer::copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125; 模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125; 模板名::片段名</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认效果--&gt;</span></span><br><span class="line">insert的功能片段在div标签</span><br><span class="line">若使用th:insert等属性进行引入，可以不写~&#123;&#125;</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]</span><br></pre></td></tr></table></figure>

<h5 id="三种引入功能片段的th属性"><a href="#三种引入功能片段的th属性" class="headerlink" title="三种引入功能片段的th属性"></a>三种引入功能片段的th属性</h5><p><strong>th:insert</strong></p>
<p>将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong></p>
<p>将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong></p>
<p>将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer::copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer::copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer::copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CURD-员工添加"><a href="#CURD-员工添加" class="headerlink" title="CURD-员工添加"></a>CURD-员工添加</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> &gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name@example.com&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> &gt;</span></span><br><span class="line">            男</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--水平排列--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> &gt;</span></span><br><span class="line">            女</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--获取controller传过来的depts，赋给对象dept--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;depts&#125;&quot;</span>  <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> &gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;日期&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CRUD-员工修改"><a href="#CRUD-员工修改" class="headerlink" title="CRUD 员工修改"></a>CRUD 员工修改</h4><p><code>edit.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upemp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1.SpringMVC中配置HiddenHttpMethodFilter：（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">            2.页面创建一个post表单</span></span><br><span class="line"><span class="comment">            3.创建一个input项，name=_method&quot;:值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置一个隐藏的提交方式，将员工id提交，否则点击修改会新增一个新的员工id--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span> &gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>   <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.lastName&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.age&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name@example.com&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.gender==1&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> &gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> &gt;</span></span><br><span class="line">                     男</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--水平排列--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.gender==0&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> &gt;</span></span><br><span class="line">                     女</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--获取controller传过来的depts，赋给对象dept--&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">option</span>   <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;dept.id==emp.getDepartment().getId()&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;depts&#125;&quot;</span>  <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> &gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">​         <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Controller</code></p>
<h4 id="CRUD-员工删除"><a href="#CRUD-员工删除" class="headerlink" title="CRUD 员工删除"></a>CRUD 员工删除</h4><p> <code>list.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/delemp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Controller</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> (value = <span class="string">&quot;/delemp/&#123;id&#125;&quot;</span>,method =RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CRUD-List页面"><a href="#CRUD-List页面" class="headerlink" title="CRUD List页面"></a>CRUD List页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-success&quot;</span> <span class="attr">href</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span>&gt;</span>员工添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-sm&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--&lt;th&gt;birth&lt;/th&gt;--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--   &lt;td th:text=&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-mm-dd&#x27;)&#125;&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/delemp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--   &lt;form th:action=&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="comment">         &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;delete&quot;/&gt;</span></span><br><span class="line"><span class="comment">      &lt;/form&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>个人理解更像是一种命名规范，一种编码模式</p>
<blockquote>
<p><a href="https://localhost:8080/myweb/getDogs">https://localhost:8080/myweb/getDogs</a> –&gt; GET /rest/api/dogs 获取所有小狗狗<br><a href="https://localhost:8080/myweb/addDogs">https://localhost:8080/myweb/addDogs</a> –&gt; POST /rest/api/dogs 添加一个小狗狗<br><a href="https://localhost:8080/myweb/updateDogs/:dog_id">https://localhost:8080/myweb/updateDogs/:dog_id</a> –&gt; PUT /rest/api/dogs/:dog_id 修改一个小狗狗<br><a href="https://localhost:8080/myweb/deleteDogs/:dog_id">https://localhost:8080/myweb/deleteDogs/:dog_id</a> –&gt; DELETE /rest/api/dogs/:dog_id 删除一个小狗狗</p>
</blockquote>
<p>每一个url都应是独立的，一个url仅代表一个资源，任何操作都是在此资源基础上进行的，利用http本身的各协议来对资源进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET    用来获取资源，</span><br><span class="line">POST  用来新建资源（也可以用于更新资源），</span><br><span class="line">PUT    用来更新资源，</span><br><span class="line">DELETE  用来删除资源</span><br></pre></td></tr></table></figure>

<p>但是浏览器只支持发送get和post方式的请求</p>
<p>Spring提供了对Rest风格的支持</p>
<ol>
<li><p>SpringMVC中有一个Filter他，它可以把普通的请求转换为规定形式的请求；配置这个Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>如何发送其他形式的请求？<br>按照以下要求：1、创建一个post类型的表单 2、表单项目中携带一个_method的参数，3、这个_mothod的值就是DELETE、PUT</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/book/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除一号图书&quot;</span>  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/book/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新一号图书&quot;</span>  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java,Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/07/04/Redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h3><ol>
<li>方便扩展</li>
<li>大数据高容量</li>
<li>数据类型多样</li>
</ol>
<span id="more"></span>

<h3 id="NoSQL四大分类"><a href="#NoSQL四大分类" class="headerlink" title="NoSQL四大分类"></a>NoSQL四大分类</h3><blockquote>
<p>NoSQL有如下优点：易<a href="https://baike.baidu.com/item/%E6%89%A9%E5%B1%95/2732987?fromModule=lemma_inlink">扩展</a>，NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能，NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。</p>
</blockquote>
<p><strong>分类</strong></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>Examples举例</strong></th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td><strong>键值（key-value）</strong></td>
<td>Tokyo Cabinet/Tyrant， Redis， Voldemort， Oracle BDB</td>
<td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td>Key 指向 Value 的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td><strong>列存储数据库</strong></td>
<td>Cassandra， HBase， Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td><strong>文档型数据库</strong></td>
<td>CouchDB， MongoDb</td>
<td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td><strong>图形(Graph)数据库</strong></td>
<td>Neo4J， InfoGrid， Infinite Graph</td>
<td>社交网络，推荐系统等。专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td>
</tr>
</tbody></table>
<h3 id="Redis定义"><a href="#Redis定义" class="headerlink" title="Redis定义"></a>Redis定义</h3><ol>
<li><p>redis是一个key-value<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F?fromModule=lemma_inlink">存储系统</a>。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(<a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8?fromModule=lemma_inlink">链表</a>)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B?fromModule=lemma_inlink">数据类型</a>都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
</li>
<li><p>Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了<a href="https://baike.baidu.com/item/%E5%8F%91%E5%B8%83%2F%E8%AE%A2%E9%98%85?fromModule=lemma_inlink">发布/订阅</a>机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN基本介绍及操作</title>
    <url>/2021/09/05/SVN%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>repository（源代码库）：源代码统一存放的地方</li>
<li>Checkout（提取）：没有源代码的情况下，需要从repository Checkout一份</li>
</ul>
<span id="more"></span>

<ul>
<li>Commit（提交）：修改代码后，需要Commit到repository</li>
<li>Update（更新）：Checkout源代码后，Update可以将所提取到的源代码与源代码库的代码同步</li>
</ul>
<p>日常开发基本流程：</p>
<p>​        Checkout完一份源代码后（手中得到了一份初始的代码）–&gt;工作几天后（此时源代码可能已经被其他人改变）–&gt;Update（将自己手中的源代码更新为最新版本）–&gt;自己对代码进行修改并完成调试工作–&gt;Commit（上传自己的源代码到源代码库，此时其他人可以看到所完成的修改）</p>
<p>PS：同时对一个文件进行修改时，SVN可以合并多个人的改动，但是当多个人对同一行程序进行了修改，SVN会提示文件Conflict冲突，此时需要手动确认</p>
<h3 id="软连接与硬连接"><a href="#软连接与硬连接" class="headerlink" title="软连接与硬连接"></a>软连接与硬连接</h3><p>​            Linux的文件系统中，磁盘分区中的文件都有自己的编号，称为索引节点号inode。</p>
<h4 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a>硬连接</h4><ul>
<li>连接文件的属性与原文件完全一样</li>
<li>与原文件的关系类似于：复制+同步更新</li>
<li>原文件丢失后，硬连接文件同样可以访问</li>
<li>不能跨分区，不能针对目录使用</li>
<li>创建硬连接不会建立inode，只会在文件原来的inode link count域+1，当硬连接被删除的时候，系统会检查inode link count的值，当值大于等于1，inode不会被回收，即文件的内容不会被删除</li>
</ul>
<h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><ul>
<li>即符号连接，本质就是建立一个新的文件，用来指向别的文件（类似于windows的快捷方式）</li>
<li>删除了这个文件即等同于删除了这个连接，但是原文件并不会消失</li>
<li>若删除了连接所指向的文件，则会导致软连接不可用</li>
<li>创建软连接会重新建立一个inode，它的结构与其他文件不一样，只是一个指明源文件的字符串信息</li>
</ul>
<p>SVN建立分支与标签的方法，就只是复制该项目，使用的方法就类似于硬链接。因此这些操作花费很小，而且是固定的时间。</p>
<h2 id="SVN生命周期"><a href="#SVN生命周期" class="headerlink" title="SVN生命周期"></a>SVN生命周期</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>​        版本库相当于一个集中的空间，用于存放所有开发者的工作成果，不仅能够存放文件，还包括了每次修改的历史</p>
<h3 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h3><p>​        Checkout操作是用来从版本库创建一个工作副本，工作副本是开发者私人的工作空间，个人对其进行内容的修改后，可以提交到版本库中</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>​        Update操作会将个人的工作副本与版本库进行同步（版本库在别人提交了他们的改动后，其他人的工作副本将会过期）。</p>
<h3 id="执行变更"><a href="#执行变更" class="headerlink" title="执行变更"></a>执行变更</h3><p>​        当检出（Checkout）后，很多操作都可以执行变更。</p>
<ul>
<li>编辑（添加、删除）</li>
<li>Rename更改文件/目录名字</li>
<li>移动</li>
</ul>
<h3 id="复查变化"><a href="#复查变化" class="headerlink" title="复查变化"></a>复查变化</h3><p>​        当完成检出的那一刻直至其他人提交前或者更新工作副本后，工作副本与版本库完全同步。在Commit操作之前往往需要复查自己的修改。</p>
<p>​        Status：提供一个变动列表，但是并不提供变动的详细信息</p>
<p>​        diff：查看变动的详细信息</p>
<h3 id="修改错误"><a href="#修改错误" class="headerlink" title="修改错误"></a>修改错误</h3><p>​        Revert：重置对工作副本的修改。可以充值一个或者多个文件/目录。同样也可以重置整个工作副本，这种情况下，revert操作将会销毁待变更列表并将工作副本恢复到原始状态。</p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>​        Merge：自动处理可以安全合并的东西，其它的则会被当做冲突。冲突的情况需要人为处理</p>
<p>​        Resolve：帮助用户找出冲突并告诉版本库如何处理这些冲突</p>
<h3 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h3><p>​        Commit：将更改从工作副本提交到版本库。这个操作将会修改版本库的内容，其他开发者可以通过更新他们的工作副本来查看这些修改。</p>
<p>​        提交前，需要将文件/目录添加到待变更列表中（列表中记录了将会被提交的改动）</p>
<p>PS：Commit是一个原子操作，要么完全提交成功，要么失败回滚，不会出现成功提交一半的情况。</p>
<h2 id="TortoiseSVN使用"><a href="#TortoiseSVN使用" class="headerlink" title="TortoiseSVN使用"></a>TortoiseSVN使用</h2><h3 id="建立工作目录"><a href="#建立工作目录" class="headerlink" title="建立工作目录"></a>建立工作目录</h3><ol>
<li>建立工作目录</li>
<li>SVN checkout，填入repository（版本库）的位置，对于SVN来说，repository位置即是URL</li>
</ol>
<h3 id="新增档案及目录到Repository中"><a href="#新增档案及目录到Repository中" class="headerlink" title="新增档案及目录到Repository中"></a>新增档案及目录到Repository中</h3><ol>
<li>将所需要新增的档案add到Repository（此时并没有真正完成新增，只是告知SVN准备要放入这些档案</li>
<li>选择Commit（提交）</li>
</ol>
<h3 id="更新档案及目录Update"><a href="#更新档案及目录Update" class="headerlink" title="更新档案及目录Update"></a>更新档案及目录Update</h3><ol>
<li>在想要更新的档案或者目录选择SVN Update</li>
<li>若需要回溯到特定的日期或者版本，选择Update to revision</li>
</ol>
<h3 id="复制档案及目录branch"><a href="#复制档案及目录branch" class="headerlink" title="复制档案及目录branch"></a>复制档案及目录branch</h3><ol>
<li>当需要一个复制的目录用于修改，等到确定这个分支已经修改完毕了，再合并到原来的主要开发版本，即可用到branch</li>
<li>在想要建立分支的地方选择branch，填写完相关信息完成分支创建，需要SVN Update操作后才能看到新增的目录（新增的目录与原来的目录无关，直至选择将branch merge回原来的主干</li>
</ol>
<h3 id="合并动作merge"><a href="#合并动作merge" class="headerlink" title="合并动作merge"></a>合并动作merge</h3><ol>
<li>选择需要合并的分支点击Merge即可</li>
</ol>
<h3 id="制作Tag或者Release"><a href="#制作Tag或者Release" class="headerlink" title="制作Tag或者Release"></a>制作Tag或者Release</h3><ol>
<li>Tag或Release就是一个特别的版本，Tag与Release的作法和Branch完全相同，区别在于Branch可能需要merge回原来的主干，而tag及release大部分都不需要merge回原来的主干</li>
<li>Tag或者Release同样需要Update后才能显示出来</li>
</ol>
<p>​    </p>
]]></content>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>Static小记</title>
    <url>/2023/07/04/Static%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。</p>
<p>即说明了主要用途就是：</p>
<p><font color="#FF0000">  方便在没有创建对象的情况下来进行调用（方法/变量） </font> </p>
<span id="more"></span> 

<blockquote>
<p>static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问</p>
</blockquote>
<h2 id="Static方法"><a href="#Static方法" class="headerlink" title="Static方法"></a>Static方法</h2><p>又称静态方法，不依赖于任何对象就可以进行访问</p>
<p>但是正因为不依附于任何对象，会出现以下情况</p>
<ul>
<li>静态方法中不能访问类的非静态成员变量和非静态成员方法</li>
<li>非静态方法可以访问类的静态成员变量和静态成员方法</li>
</ul>
<h2 id="Static变量"><a href="#Static变量" class="headerlink" title="Static变量"></a>Static变量</h2><p>又称静态变量</p>
<p>静态变量和非静态变量的区别是：</p>
<ul>
<li>静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化</li>
<li>非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响</li>
</ul>
<p>static成员变量的初始化顺序按照定义的顺序进行初始化</p>
<h2 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h2><p>static块可以置于类中的任何地方，形成静态代码块以优化程序性能</p>
<p>类中可以有多个static块</p>
<p>在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次</p>
<p>对于某些类中的方法在每次被调用的时候，都会创建一次对象，就会导致空间浪费，因此如果用static代码块让其只执行一次就可以优化性能</p>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Date birthDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBornBoomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Date startDate = Date.valueOf(<span class="string">&quot;1946&quot;</span>);</span><br><span class="line">        Date endDate = Date.valueOf(<span class="string">&quot;1964&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Date startDate,endDate;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        startDate = Date.valueOf(<span class="string">&quot;1946&quot;</span>);</span><br><span class="line">        endDate = Date.valueOf(<span class="string">&quot;1964&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Date birthDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBornBoomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="#FF0000">将一些只需要进行一次的初始化操作都放在static代码块中进行</font></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Android项目过程中的一些认识</title>
    <url>/2021/01/19/%E5%85%B3%E4%BA%8EAndroid%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>写在前面：</p>
<p>​        Android Studio升级到4.1后，之前很多的包都不可用了，需要寻找其他办法。</p>
<span id="more"></span>

<p> Android Studio 3.4推出了AndroidX要取代原来的support库。创建新项目的时候，如果没有勾选“Use androidx.* artifacts”，那么导入外部模块不会报错；只有勾选了“Use androidx.* artifacts”，导入外部模块才会报上面的错。勾选界面如下图所示：</p>
<p><img src="/../images/%E5%85%B3%E4%BA%8EAndroid%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/Androidx.png"></p>
<p>如果已经勾选了“Use androidx.* artifacts”，可以在gradle.properties目录下更改信息，如下图：</p>
<p><img src="/../images/%E5%85%B3%E4%BA%8EAndroid%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/image-20210120154553213.png"></p>
<p>详细的support依赖库的新旧对应关系见下表：</p>
<table>
<thead>
<tr>
<th><strong>支持库的旧路径</strong></th>
<th><strong>支持库的新路径</strong></th>
</tr>
</thead>
<tbody><tr>
<td>com.android.support.constraint:constraint-layout</td>
<td>androidx.constraintlayout:constraintlayout:1.1.2</td>
</tr>
<tr>
<td>com.android.support.test.espresso:espresso-core</td>
<td>androidx.test.espresso:espresso-core:3.1.0</td>
</tr>
<tr>
<td>com.android.support.test:runner</td>
<td>androidx.test: runner:1.1.0</td>
</tr>
<tr>
<td>com.android.support:appcompat-v7</td>
<td>androidx.appcompat:appcompat:1.0.0</td>
</tr>
<tr>
<td>com.android.support:cardview-v7</td>
<td>androidx.cardview:cardview:1.0.0</td>
</tr>
<tr>
<td>com.android.support:design</td>
<td>com.google.android.material:material:1.0.0-rc01</td>
</tr>
<tr>
<td>com.android.support:multidex</td>
<td>androidx.multidex:multidex:2.0.0</td>
</tr>
<tr>
<td>com.android.support:palette-v7</td>
<td>androidx.palette:palette:1.0.0</td>
</tr>
<tr>
<td>com.android.support:recyclerview-v7</td>
<td>androidx.recyclerview:recyclerview:1.0.0</td>
</tr>
<tr>
<td>com.android.support:support-v4</td>
<td>androidx.legacy:legacy-support-v4:1.0.0</td>
</tr>
</tbody></table>
<p>详细的support控件的新旧对应关系见下表：</p>
<table>
<thead>
<tr>
<th>支持控件的旧包名</th>
<th align="left">支持控件的新包名</th>
</tr>
</thead>
<tbody><tr>
<td>android.support.v4.app.Fragment</td>
<td align="left">androidx.fragment.app.Fragment</td>
</tr>
<tr>
<td>android.support.v4.app.FragmentActivity</td>
<td align="left">androidx.fragment.app.FragmentActivity</td>
</tr>
<tr>
<td>android.support.v4.app.FragmentManager</td>
<td align="left">androidx.fragment.app.FragmentManager</td>
</tr>
<tr>
<td>android.support.v4.app.FragmentPagerAdapter</td>
<td align="left">androidx.fragment.app.FragmentPagerAdapter</td>
</tr>
<tr>
<td>android.support.v4.view.ViewPager</td>
<td align="left">androidx.viewpager.widget.ViewPager</td>
</tr>
<tr>
<td>android.support.v4.view.PagerAdapter</td>
<td align="left">androidx.viewpager.widget.PagerAdapter</td>
</tr>
<tr>
<td>android.support.v4.view.PagerTabStrip</td>
<td align="left">androidx.viewpager.widget.PagerTabStrip</td>
</tr>
<tr>
<td>android.support.v4.view.PagerTitleStrip</td>
<td align="left">androidx.viewpager.widget.PagerTitleStrip</td>
</tr>
<tr>
<td>android.support.v7.app.AppCompatActivity</td>
<td align="left">androidx.appcompat.app.AppCompatActivity</td>
</tr>
<tr>
<td>android.support.v7.widget.Toolbar</td>
<td align="left">androidx.appcompat.widget.Toolbar</td>
</tr>
<tr>
<td>android.support.v7.widget.RecyclerView</td>
<td align="left">androidx.recyclerview.widget.RecyclerView</td>
</tr>
<tr>
<td>android.support.v7.widget.GridLayoutManager</td>
<td align="left">androidx.recyclerview.widget.GridLayoutManager</td>
</tr>
<tr>
<td>android.support.v7.widget.LinearLayoutManager</td>
<td align="left">androidx.recyclerview.widget.LinearLayoutManager</td>
</tr>
<tr>
<td>android.support.v7.widget.StaggeredGridLayoutManager</td>
<td align="left">androidx.recyclerview.widget.StaggeredGridLayoutManager</td>
</tr>
<tr>
<td>android.support.v7.widget.CardView</td>
<td align="left">androidx.cardview.widget.CardView</td>
</tr>
<tr>
<td>android.support.v7.graphics.Palette</td>
<td align="left">androidx.palette.graphics.Palette</td>
</tr>
</tbody></table>
<h2 id="Android项目流程"><a href="#Android项目流程" class="headerlink" title="Android项目流程"></a>Android项目流程</h2><p> 从个人理解的角度来说：</p>
<p>​         一个项目的最开始的一步应该是框架的搭建，确定好项目的各个模块的功能。</p>
<p>​         先设想好自己所要实现的功能，将Java代码实现，然后根据Java代码完成xml代码的设计。</p>
<h2 id="Banner相关的一些认识"><a href="#Banner相关的一些认识" class="headerlink" title="Banner相关的一些认识"></a>Banner相关的一些认识</h2><h2 id="Glide相关的一些认识"><a href="#Glide相关的一些认识" class="headerlink" title="Glide相关的一些认识"></a>Glide相关的一些认识</h2><h2 id="Adapter相关的一些认识"><a href="#Adapter相关的一些认识" class="headerlink" title="Adapter相关的一些认识"></a>Adapter相关的一些认识</h2><h2 id="Bean相关的一些认识"><a href="#Bean相关的一些认识" class="headerlink" title="Bean相关的一些认识"></a>Bean相关的一些认识</h2><h2 id="Gson相关的一些认识"><a href="#Gson相关的一些认识" class="headerlink" title="Gson相关的一些认识"></a>Gson相关的一些认识</h2><p>​         首先需要导入Gson的第三方包，且由于Android Studio 4.1无GsonFormat的插件，只能用SGsonFormat代替使用，在操作上基本上一致。</p>
<p>​        将所要解析的数据导入SGson中进行解析会自动得到类中方法。        </p>
<p>下图为json数据解析的具体流程：</p>
<p><img src="/../images/%E5%85%B3%E4%BA%8EAndroid%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/image-20210202152418181.png"></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Toast的那些事</title>
    <url>/2021/01/17/%E5%85%B3%E4%BA%8EToast%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-最基本的Toast"><a href="#1-最基本的Toast" class="headerlink" title="1.最基本的Toast"></a>1.最基本的Toast</h2><p>系统自带Toast采用的是队列的方式， 等当前Toast消失后， 下一个Toast才能显示出来；原因是Toast的管理是在队列中，点击一次，就会产生一个新的Toast，要等这个队列中的Toast处理完，这个显示Toast的任务才算结束。 so~ 我们可以把Toast改成单例模式，没有Toast再新建它，这样也就解决了连续点击Toast，一直在显示的问题。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(Context,<span class="string">&quot;最基本的Toast&quot;</span>,Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>



<h2 id="2-自定义位置的Toast"><a href="#2-自定义位置的Toast" class="headerlink" title="2.自定义位置的Toast"></a>2.自定义位置的Toast</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(Context,<span class="string">&quot;自定义位置的Toast&quot;</span>,Toast.LENGTH_SHORT);</span><br><span class="line">toast.setGravity(Gravity.LEFT,<span class="number">50</span>,<span class="number">0</span>);              </span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure>



<h2 id="3-自定义布局（带图片）的Toast"><a href="#3-自定义布局（带图片）的Toast" class="headerlink" title="3.自定义布局（带图片）的Toast"></a>3.自定义布局（带图片）的Toast</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast customToast = <span class="keyword">new</span> Toast(MainActivity.<span class="keyword">this</span>.getApplicationContext());</span><br><span class="line"> <span class="comment">//获得view的布局</span></span><br><span class="line">View customView = LayoutInflater.from(MainActivity.<span class="keyword">this</span>).inflate(R.layout.custom_toast,<span class="keyword">null</span>);</span><br><span class="line">ImageView img = (ImageView) customView.findViewById(R.id.iv);</span><br><span class="line">TextView tv = (TextView) customView.findViewById(R.id.tv);</span><br><span class="line">  <span class="comment">//设置ImageView的图片</span></span><br><span class="line">img.setBackgroundResource(R.drawable.ab);</span><br><span class="line">  <span class="comment">//设置textView中的文字</span></span><br><span class="line">tv.setText(<span class="string">&quot;我是带图片的自定义位置的toast&quot;</span>);</span><br><span class="line">  <span class="comment">//设置toast的View,Duration,Gravity最后显示</span></span><br><span class="line">customToast.setView(customView);</span><br><span class="line">customToast.setDuration(Toast.LENGTH_SHORT);</span><br><span class="line">customToast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">customToast.show();</span><br></pre></td></tr></table></figure>



<h2 id="4-自定义带动画效果的Toast控件"><a href="#4-自定义带动画效果的Toast控件" class="headerlink" title="4.自定义带动画效果的Toast控件"></a>4.自定义带动画效果的Toast控件</h2><p>其实，这个就是3.带图片的toast的加强版。将里面其中的图片，改换成我们自定义的view，通过自定义view,来实现多种多样的Toast.<br>1.创建自定义的view.CustomToastView继承View.<br>整体的Custom的结构（下文会有具体实现代码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomToastView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">   <span class="comment">//a.初始化其中的一些变量。</span></span><br><span class="line">   ......</span><br><span class="line">   <span class="comment">//a.实现CustomToastView的3个构造函数</span></span><br><span class="line">   ......</span><br><span class="line">   <span class="comment">//b.初始化画笔的参数和矩形参数</span></span><br><span class="line">   .....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="number">1234567891011</span></span><br></pre></td></tr></table></figure>

<p>a.初始化其中的一些变量，实现3个构造函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomToastView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">     <span class="comment">//矩形，设置toast布局时用</span></span><br><span class="line">    RectF rectF =<span class="keyword">new</span> RectF();</span><br><span class="line">    <span class="comment">//属性动画</span></span><br><span class="line">    ValueAnimator valueAnimator;</span><br><span class="line">    <span class="keyword">float</span> mAnimatedValue = <span class="number">0f</span>;</span><br><span class="line">    <span class="comment">//自定义view的画笔</span></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mWidth = <span class="number">0f</span>; <span class="comment">//view的宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mEyeWidth = <span class="number">0f</span>; <span class="comment">//笑脸的眼睛半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mPadding = <span class="number">0f</span>;  <span class="comment">//view的偏移量。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> endAngle = <span class="number">0f</span>; <span class="comment">//圆弧结束的度数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是左眼还是右眼</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSmileLeft = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSmileRight = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomToastView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomToastView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomToastView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>b.设置画笔的参数以及矩形的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">       mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">       mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">       mPaint.setColor(Color.parseColor(<span class="string">&quot;#5cb85c&quot;</span>));</span><br><span class="line">       mPaint.setStrokeWidth(dip2px(<span class="number">2</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       rectF = <span class="keyword">new</span> RectF(mPadding, mPadding, mWidth - mPadding, mWidth - mPadding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//dip转px。为了支持多分辨率手机</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dip2px</span><span class="params">(<span class="keyword">float</span> dpValue)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">float</span> scale = getContext().getResources().getDisplayMetrics().density;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">   &#125;<span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>

<p>c.重写onMeasure</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        initPaint();</span><br><span class="line">        initRect();</span><br><span class="line">        mWidth = getMeasuredWidth(); <span class="comment">//当前view在父布局里的宽度。即view所占宽度。</span></span><br><span class="line">        mPadding = dip2px(<span class="number">10</span>);</span><br><span class="line">        mEyeWidth = dip2px(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>

<p>d.重写OnDraw</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">      mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">      <span class="comment">//画微笑弧（从左向右画弧）</span></span><br><span class="line">      canvas.drawArc(rectF, <span class="number">180</span>, endAngle, <span class="keyword">false</span>, mPaint);</span><br><span class="line">      <span class="comment">//设置画笔为实心</span></span><br><span class="line">      mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">      <span class="comment">//左眼</span></span><br><span class="line">      <span class="keyword">if</span> (isSmileLeft) &#123;</span><br><span class="line">          canvas.drawCircle(mPadding + mEyeWidth + mEyeWidth / <span class="number">2</span>, mWidth / <span class="number">3</span>, mEyeWidth, mPaint);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//右眼</span></span><br><span class="line">      <span class="keyword">if</span> (isSmileRight) &#123;</span><br><span class="line">          canvas.drawCircle(mWidth - mPadding - mEyeWidth - mEyeWidth / <span class="number">2</span>, mWidth / <span class="number">3</span>, mEyeWidth, mPaint);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>e.自定义View中的动画效果实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * startAnim()不带参数的方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      stopAnim();</span><br><span class="line">      startViewAnim(<span class="number">0f</span>, <span class="number">1f</span>, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 停止动画的方法</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopAnim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (valueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">          clearAnimation();</span><br><span class="line">          isSmileLeft = <span class="keyword">false</span>;</span><br><span class="line">          isSmileRight = <span class="keyword">false</span>;</span><br><span class="line">          mAnimatedValue = <span class="number">0f</span>;</span><br><span class="line">          valueAnimator.end();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 开始动画的方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> startF 起始值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> endF   结束值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> time  动画的时间</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> ValueAnimator <span class="title">startViewAnim</span><span class="params">(<span class="keyword">float</span> startF, <span class="keyword">final</span> <span class="keyword">float</span> endF, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//设置valueAnimator 的起始值和结束值。</span></span><br><span class="line">      valueAnimator = ValueAnimator.ofFloat(startF, endF);</span><br><span class="line">      <span class="comment">//设置动画时间</span></span><br><span class="line">      valueAnimator.setDuration(time);</span><br><span class="line">      <span class="comment">//设置补间器。控制动画的变化速率</span></span><br><span class="line">      valueAnimator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</span><br><span class="line">      <span class="comment">//设置监听器。监听动画值的变化，做出相应方式。</span></span><br><span class="line">      valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator valueAnimator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">              mAnimatedValue = (<span class="keyword">float</span>) valueAnimator.getAnimatedValue();</span><br><span class="line">              <span class="comment">//如果value的值小于0.5</span></span><br><span class="line">              <span class="keyword">if</span> (mAnimatedValue &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">                  isSmileLeft = <span class="keyword">false</span>;</span><br><span class="line">                  isSmileRight = <span class="keyword">false</span>;</span><br><span class="line">                  endAngle = -<span class="number">360</span> * (mAnimatedValue);</span><br><span class="line">                  <span class="comment">//如果value的值在0.55和0.7之间</span></span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAnimatedValue &gt; <span class="number">0.55</span> &amp;&amp; mAnimatedValue &lt; <span class="number">0.7</span>) &#123;</span><br><span class="line">                  endAngle = -<span class="number">180</span>;</span><br><span class="line">                  isSmileLeft = <span class="keyword">true</span>;</span><br><span class="line">                  isSmileRight = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="comment">//其他</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  endAngle = -<span class="number">180</span>;</span><br><span class="line">                  isSmileLeft = <span class="keyword">true</span>;</span><br><span class="line">                  isSmileRight = <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//重绘</span></span><br><span class="line">              postInvalidate();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!valueAnimator.isRunning()) &#123;</span><br><span class="line">          valueAnimator.start();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> valueAnimator;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于idea配置中遇到的坑</title>
    <url>/2021/01/07/%E5%85%B3%E4%BA%8Eidea%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​       配置idea时一定弄清楚http proxy，这是http代理，个人理解相当于是VPN，配置了这个后而导致gradle无法正常下载，从而引发了一系列问题，谨记。</p>
]]></content>
  </entry>
  <entry>
    <title>加密算法</title>
    <url>/2023/09/15/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><blockquote>
<p>常见的加密方式分为两类：对称加密和非对称加密。</p>
<ul>
<li>对称加密算法包括AES、DES等，即仅有一个密钥，加密解密过程较快，但是一旦密钥被其他人获取，便不再安全</li>
<li>非对称加密算法最典型的就是RSA算法，拥有两种密钥：公钥和私钥，用公钥加密只能用私钥解密，用私钥加密只能用公钥进行解密。</li>
</ul>
</blockquote>
<span id="more"></span>

<h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><h4 id="密钥计算"><a href="#密钥计算" class="headerlink" title="密钥计算"></a>密钥计算</h4><p><img src="/../images/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/image-20231228162029989.png" alt="image-20231111135009497"></p>
<h4 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h4><p><img src="/../images/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/image-20231111135138842.png" alt="image-20231111135138842"></p>
<h4 id="解密方法"><a href="#解密方法" class="headerlink" title="解密方法"></a>解密方法</h4><p><img src="/../images/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/image-20231111135131543.png" alt="image-20231111135131543"></p>
<h2 id="ES数据库bcrypt加密"><a href="#ES数据库bcrypt加密" class="headerlink" title="ES数据库bcrypt加密"></a>ES数据库bcrypt加密</h2><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><p>bcrypt加密算法是一种哈希函数，它将输入密码和盐值作为输入，然后进行加密生成一个固定长度的哈希值。这个加密过程是不可逆的，也就是说无法从哈希值还原出原始密码。</p>
<p>在bcrypt中，加密过程包括以下步骤：</p>
<ol>
<li>混合密码和盐值：bcrypt会将输入的密码和一个盐值进行混合，生成一个新的字符串。这个盐值是一个随机生成的字符串，每次加密时都会不同。</li>
<li>哈希计算：混合后的字符串会被送入哈希函数中进行计算，生成一个固定长度的哈希值。bcrypt使用的是SHA-256哈希函数。</li>
<li>生成加密哈希值：bcrypt还会将盐值和原始密码以及加密后的哈希值一起存储在数据库中。这个加密哈希值是由盐值、原始密码和加密后的哈希值经过一系列运算生成的。</li>
</ol>
<p>在验证密码时，用户输入密码后，系统会使用相同的盐值、哈希函数和加密算法对用户输入的密码进行加密计算，生成一个新的哈希值。然后，将新的哈希值与数据库中存储的加密哈希值进行比较，如果它们匹配，则密码验证成功。</p>
<p>bcrypt加密算法的优点是它是一种慢速算法，可以防止密码被暴力破解和彩虹表攻击。同时，由于盐值的加入，即使攻击者获取了加密的密码和盐值，也很难通过逆向计算还原出原始密码。因此，bcrypt被广泛应用于密码存储和身份验证等场景。</p>
<blockquote>
<p>以下是一个使用bcrypt加密算法进行加密的示例：</p>
<p>假设有一个密码为 “password”，我们将其使用bcrypt加密算法进行加密。</p>
<p>首先，我们需要生成一个随机的盐值。bcrypt会使用一个随机数生成器生成一个随机的盐值，比如 “abc”。</p>
<p>然后，我们将密码和盐值送入bcrypt哈希函数中进行计算，生成一个加密后的哈希值。这个哈希值是一个固定长度的字符串，比如 “22694910be9e9215a0e56f85444b3b7e0055e832fc37f2db7419f6d121a9d76c0c0c6d277a589f1d3cd670d294cda1f8e7e49a7ed095ed3c6d55217a4489a5934e8e04c4d1df918cc2c6f8a7b83a1c3a0c07cfc5f51a23c7a7abcab1fa9620ee3fbd3d135e8bfa690d0d8d5bcf88d77e4b2f77c8b2c1a0b03634a46c2bd02cffcf359a5db227b1a9678edab7d8aa5f1fc0a0b2b119d0feb7cb1fd9a3cbe4fe4a9e3ec070b1df9cd36dbd40b26b589d3a6eb5fabfeb50df6d20e9b92fd6c3b1d3d5e07ed698e94ae8e36ab1aedbb7d82b12c0bdfc7b0f76ac8fe0d6fe3db12c0cda13bf65cf7631fd74de4”。</p>
<p>最后，我们将加密后的哈希值和盐值一起存储在数据库中。这样，即使攻击者获取了加密的密码和盐值，也很难通过逆向计算还原出原始密码。</p>
<p>在验证密码时，用户输入密码后，系统会使用相同的盐值、哈希函数和加密算法对用户输入的密码进行加密计算，生成一个新的哈希值。然后，将新的哈希值与数据库中存储的加密哈希值进行比较，如果它们匹配，则密码验证成功。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>反射与注解</title>
    <url>/2023/07/04/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote>
<p>PS：注解分为三种类型</p>
<ul>
<li>内置注解：系统自带的注解</li>
<li>元注解：用于负责注解其他注解（设置注解的使用范围等参数）</li>
<li>自定义注解</li>
</ul>
</blockquote>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*自定义注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MyAnnotation(age = 18,name = &quot;111&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个注解</span></span><br><span class="line">    <span class="comment">//Target 表示我们的注解可以用在哪些地方</span></span><br><span class="line">    <span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line">    <span class="comment">//Retention 表示我们的注解在什么地方还有效</span></span><br><span class="line">            <span class="comment">// runtime &gt; class &gt; sources</span></span><br><span class="line">        <span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="comment">//Documented 表示是否将我们的注解生成在JAVAdoc中</span></span><br><span class="line">        <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">        <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span>  0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span>  -1</span>;<span class="comment">//如果默认值为-1，代表不存在</span></span><br><span class="line"></span><br><span class="line">        String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;test&quot;</span>,<span class="string">&quot;6666&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><p>在运行时可以改变其结构的语言</p>
<p>如：JavaScript、PHP、Python</p>
<h3 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h3><p>运行时结构不可变的语言</p>
<p>如：Java、C、C++</p>
<p>Java不是动态语言，但是Java可以被称之为”准动态语言“。可以利用反射机制获得类似动态语言的特性</p>
<h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><p>正常方式：</p>
<p>引入需要的”包类“名称——&gt;通过new实例化——&gt;取得实例化对象</p>
<p>反射方式：</p>
<p>实例化对象——&gt;getClass()方法——&gt;得到完整的”包类“名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>通过对象获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1 = person.getClass();</span><br></pre></td></tr></table></figure></li>
<li><p>forname获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c2 = Class.forName(<span class="string">&quot;com.company.reflection.Student&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>通过类名.class获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c3 = Student.class;</span><br></pre></td></tr></table></figure></li>
<li><p>基本内置类型的包装类都有一个Type属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c4 = Integer.TYPE;</span><br></pre></td></tr></table></figure></li>
<li><p>获得父类类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c5 = c1.getSuperclass();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Java反射优点和缺点"><a href="#Java反射优点和缺点" class="headerlink" title="Java反射优点和缺点"></a>Java反射优点和缺点</h3><p>优点：</p>
<p>可以实现动态创建和编译，体现出很大的灵活性</p>
<p>缺点：</p>
<p>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作</p>
<h3 id="通过反射获取Class对象"><a href="#通过反射获取Class对象" class="headerlink" title="通过反射获取Class对象"></a>通过反射获取Class对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1 = Class.forName(<span class="string">&quot;com.company.reflection.User&quot;</span>);</span><br><span class="line">System.out.println(c1);</span><br><span class="line"></span><br><span class="line">Class c2 = Class.forName(<span class="string">&quot;com.company.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(c1.hashCode());</span><br><span class="line">System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">-&gt;运行结果两个hashCode值相同</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：一个类在内存中只有一个Class对象</p>
<p>一个类被加载后，类的整个结构都会被封装在Class对象中</p>
</blockquote>
<p>在Object类中定义了以下的方法，此方法被所有子类继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>方法返回值的类型是一个Class类，为Java反射的源头</p>
<blockquote>
<p>只要元素类型和维度一样，就是同一个Class</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>网络设备</title>
    <url>/2023/09/05/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h2><blockquote>
<p>堡垒机既可以是硬件设备，也可以是软件，硬件设备通常是指预装了堡垒机软件的专用服务器，具有更高的稳定性和性能，而软件形式的堡垒机则可以在虚拟化环境中部署。</p>
</blockquote>
<span id="more"></span>

<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>单点登录功能</p>
<p>支持对X11、Linux、Unix、数据库、网络设备、安全设备等一系列授权账号进行密码的自动化周期更改，简化密码管理，让使用者无需记忆众多系统密码，即可实现自动登录目标设备，便捷安全；</p>
</li>
<li><p>账号管理</p>
<p>设备支持统一账户管理策略，能够实现对所有服务器、网路设备、安全设备等账号进行集中管理，完成对账号整个生命周期的监控，并且可以对设备进行特殊设置，如：审计巡检员、运维操作员、设备管理员等自定义，以满足审计需求；</p>
</li>
<li><p>身份认证</p>
<p>设备提供统一的认证接口，对用户进行认证，支持身份认证模式包括动态口令、静态密码、硬件key、生物特征等多种认证方式，设备具有灵活的定制接口，可以与其他第三方认证服务器直接结合；安全的认证模式，有效提高了认证的安全性和可靠性；</p>
</li>
<li><p>资源授权</p>
<p>设备提供基于用户、目标设备、时间、协议类型IP、行为等要素实现细粒度的操作授权，最大限度保护用户资源的安全；</p>
</li>
<li><p>访问控制</p>
<p>设备支持对不同用户进行不同策略的制定，细粒度的访问控制能够最大限度的保护用户资源的安全，严防非法、越权访问事件的发生；</p>
</li>
<li><p>操作审计</p>
<p>设备能够对字符串、图形、文件传输、数据库等安全操作进行行为审计；通过设备录像方式监控运维人员对操作系统、安全设备、网络设备、数据库等进行的各种操作，对违规行为进行事中控制；对终端指令信息能够进行精确搜索，进行录像精确定位；</p>
</li>
</ol>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><blockquote>
<p>SSH即Secure Shell，是一种安全协议</p>
</blockquote>
<p>SSH主要使用两种加密技术：对称加密和公钥加密。</p>
<ol>
<li>对称加密：SSH使用对称加密算法（如AES、DES等）来加密数据传输。这种加密算法使用同一密钥进行加密和解密。在SSH连接过程中，客户端和服务器会协商一个相同的密钥，用于后续的数据传输加密。</li>
<li>公钥加密：公钥加密算法（如RSA、El-Gamal等）用于加密密钥交换过程，以确保客户端和服务器在建立连接前交换密钥的安全性。在这种算法中，每个人都有一对公钥和私钥。公钥用于加密数据，而私钥用于解密数据。在SSH连接过程中，客户端使用服务器的公钥加密一个随机数，然后发送给服务器。服务器使用私钥解密该随机数，以验证客户端的身份。</li>
</ol>
<p>通过结合使用这两种加密技术，SSH可以提供安全的远程登录和数据传输服务。</p>
<h3 id="SSH工作机制"><a href="#SSH工作机制" class="headerlink" title="SSH工作机制"></a>SSH工作机制</h3><p> 服务器启动的时候自己产生一个密钥(768bit公钥)，本地的ssh客户端发送连接请求到ssh服务器，服务器检查连接点客户端发送的数据和IP地址，确认合法后发送密钥(768bits)给客户端，此时客户端将本地私钥(256bit)和服务器的公钥(768bit)结合成密钥对key(1024bit),发回给服务器端，建立连接通过key-pair数据传输。   </p>
<p><img src="/../images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/image-20230906100441548.png" alt="image-20230906100441548"></p>
<ul>
<li>1.远程Server收到Client端用户TopGun的登录请求，Server把自己的公钥发给用户。</li>
<li>2.Client使用这个公钥，将密码进行加密。</li>
<li>3.Client将加密的密码发送给Server端。</li>
<li>4.远程Server用自己的私钥，解密登录密码，然后验证其合法性。</li>
<li>5.若验证结果，给Client相应的响应</li>
</ul>
<h3 id="Client端如何保证接受到的公钥就是目标Server端的？"><a href="#Client端如何保证接受到的公钥就是目标Server端的？" class="headerlink" title="Client端如何保证接受到的公钥就是目标Server端的？"></a>Client端如何保证接受到的公钥就是目标Server端的？</h3><p><img src="/../images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/image-20230906154344223.png" alt="image-20230906154344223"></p>
<p><img src="/../images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/image-20230906154407078.png" alt="image-20230906154407078"></p>
<ul>
<li>1.Client将自己的公钥存放在Server上，追加在文件authorized_keys中。</li>
<li>2.Server端接收到Client的连接请求后，会在authorized_keys中匹配到Client的公钥pubKey，并生成随机数R，用Client的公钥对该随机数进行加密得到pubKey(R)，然后将加密后信息发送给Client。</li>
<li>3.Client端通过私钥进行解密得到随机数R，然后对随机数R和本次会话的SessionKey利用MD5生成摘要Digest1，发送给Server端。</li>
<li>4.Server端会也会对R和SessionKey利用同样摘要算法生成Digest2。</li>
<li>5.Server端会最后比较Digest1和Digest2是否相同，完成认证过程。</li>
</ul>
<h2 id="公钥与私钥"><a href="#公钥与私钥" class="headerlink" title="公钥与私钥"></a>公钥与私钥</h2><p><strong>1、私钥算法</strong><br><strong>私钥加密算法</strong>，又称 <strong>对称加密算法</strong>，因为这种算法解密密钥和加密密钥是相同的。也正因为同一密钥既用于加密又用于解密，所以这个密钥是不能公开的。常见的有《<a href="https://link.zhihu.com/?target=http://songlee24.github.io/2014/12/06/des-encrypt/">DES加密算法</a>》、《<a href="https://link.zhihu.com/?target=http://songlee24.github.io/2014/12/13/aes-encrypt/">AES加密算法</a>》。<br><strong>2、公钥算法</strong><br><strong>公钥加密算法</strong>，也就是 <strong>非对称加密算法</strong>，这种算法加密和解密的密码不一样，一个是公钥，另一个是私钥：</p>
<ul>
<li>公钥和私钥成对出现</li>
<li>公开的密钥叫公钥，只有自己知道的叫私钥</li>
<li>用公钥加密的数据只有对应的私钥可以解密</li>
<li>用私钥加密的数据只有对应的公钥可以解密</li>
<li>如果可以用公钥解密，则必然是对应的私钥加的密</li>
<li>如果可以用私钥解密，则必然是对应的公钥加的密</li>
</ul>
<p>公钥和私钥是相对的，两者本身并没有规定哪一个必须是公钥或私钥。<br>二、实现数据的安全传输<br>要实现数据的安全传输，当然就要对数据进行加密了。<br>如果使用对称加密算法，加解密使用同一个密钥，除了自己保存外，对方也要知道这个密钥，才能对数据进行解密。如果你把密钥也一起传过去，就存在密码泄漏的可能。所以我们使用<strong>非对称算法</strong>，过程如下：</p>
<ol>
<li>首先 接收方 生成一对密钥，即私钥和公钥；</li>
<li>然后，接收方 将公钥发送给 发送方；</li>
<li>发送方用收到的公钥对数据加密，再发送给接收方；</li>
<li>接收方收到数据后，使用自己的私钥解密。</li>
</ol>
<p>由于在非对称算法中，公钥加密的数据必须用对应的私钥才能解密，而私钥又只有接收方自己知道，这样就保证了数据传输的安全性。</p>
<p><img src="/../images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/image-20230907111542083.png" alt="image-20230907111542083"></p>
<h2 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h2><h3 id="星型拓扑结构"><a href="#星型拓扑结构" class="headerlink" title="星型拓扑结构"></a>星型拓扑结构</h3><p>星型结构是最古老的一种连接方式，大家每天都使用的<a href="https://baike.baidu.com/item/%E7%94%B5%E8%AF%9D?fromModule=lemma_inlink">电话</a>属于这种结构。星型结构是指各工作站以星型方式连接成网。网络有中央节点，其他节点（<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E7%AB%99?fromModule=lemma_inlink">工作站</a>、服务器）都与中央节点直接相连，这种结构以中央节点为中心，因此又称为<a href="https://baike.baidu.com/item/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%BD%91%E7%BB%9C?fromModule=lemma_inlink">集中式网络</a>。</p>
<p>这种结构便于集中控制，因为端用户之间的通信必须经过中心站。由于这一特点，也带来了易于维护和安全等优点。端用户设备因为故障而停机时也不会影响其它端用户间的通信。同时它的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F?fromModule=lemma_inlink">网络延迟</a>时间较小，传输误差较低。但这种结构非常不利的一点是，中心系统必须具有极高的可靠性，因为中心系统一旦损坏，整个系统便趋于瘫痪。对此中心系统通常采用<a href="https://baike.baidu.com/item/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E4%BB%BD?fromModule=lemma_inlink">双机热备份</a>，以提高<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7?fromModule=lemma_inlink">系统的可靠性</a>。 [1] </p>
<img src="./../images/网络设备/image-20240104132300343.png" alt="image-20240104132300343" style="zoom: 67%;">

<h3 id="环型网络拓扑结构"><a href="#环型网络拓扑结构" class="headerlink" title="环型网络拓扑结构"></a>环型网络拓扑结构</h3><p><a href="https://baike.baidu.com/item/%E7%8E%AF%E5%9E%8B%E7%BB%93%E6%9E%84?fromModule=lemma_inlink">环型结构</a>在LAN中使用较多。这种结构中的传输媒体从一个端用户到另一个端用户，直到将所有的端用户连成环型。数据在环路中沿着一个方向在各个<a href="https://baike.baidu.com/item/%E8%8A%82%E7%82%B9?fromModule=lemma_inlink">节点</a>间传输，信息从一个节点传到另一个节点。这种结构显而易见消除了端用户通信时对中心系统的依赖性。</p>
<p>环行结构的特点是：每个端用户都与两个相临的端用户相连，因而存在着点到点链路，但总是以单向方式操作，于是便有上游端用户和下游端用户之称；信息流在网中是沿着固定方向流动的，两个<a href="https://baike.baidu.com/item/%E8%8A%82%E7%82%B9?fromModule=lemma_inlink">节点</a>仅有一条道路，故简化了<a href="https://baike.baidu.com/item/%E8%B7%AF%E5%BE%84?fromModule=lemma_inlink">路径</a>选择的控制；环路上各节点都是<a href="https://baike.baidu.com/item/%E8%87%AA%E4%B8%BE?fromModule=lemma_inlink">自举</a>控制，故控制<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6?fromModule=lemma_inlink">软件</a>简单；由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87?fromModule=lemma_inlink">信息传输速率</a>，使网络的响应时间延长；环路是封闭的，不便于扩充；可靠性低，一个节点<a href="https://baike.baidu.com/item/%E6%95%85%E9%9A%9C?fromModule=lemma_inlink">故障</a>，将会造成全网瘫痪；维护难，对分支节点<a href="https://baike.baidu.com/item/%E6%95%85%E9%9A%9C%E5%AE%9A%E4%BD%8D?fromModule=lemma_inlink">故障定位</a>较难。 </p>
<img src="./../images/网络设备/image-20240104132422039.png" alt="image-20240104132422039" style="zoom:67%;">

<h3 id="总线拓扑结构"><a href="#总线拓扑结构" class="headerlink" title="总线拓扑结构"></a>总线拓扑结构</h3><p><a href="https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84?fromModule=lemma_inlink">总线结构</a>是使用同一媒体或电缆连接所有端用户的一种方式，也就是说，连接端用户的<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AA%92%E4%BD%93?fromModule=lemma_inlink">物理媒体</a>由所有设备共享，各工作站地位平等，无中心<a href="https://baike.baidu.com/item/%E8%8A%82%E7%82%B9?fromModule=lemma_inlink">节点</a>控制，公用总线上的信息多以基带形式串行传递，其传递方向总是从发送信息的节点开始向两端扩散，如同广播电台发射的信息一样，因此又称广播式计算机网络。各<a href="https://baike.baidu.com/item/%E8%8A%82%E7%82%B9?fromModule=lemma_inlink">节点</a>在接受信息时都进行地址检查，看是否与自己的工作站地址相符，相符则接收网上的信息。</p>
<p>使用这种结构必须解决的一个问题是确保端用户使用媒体发送数据时不能出现冲突。在点到点链路配置时，这是相当简单的。如果这条链路是半双工操作，只需使用很简单的机制便可保证两个端用户轮流工作。在一点到多点方式中，对线路的访问依靠控制端的探询来确定。然而，在LAN环境下，由于所有数据站都是平等的，不能采取上述机制。对此，研究了一种在<a href="https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF?fromModule=lemma_inlink">总线</a>共享型网络使用的媒体访问方法：带有碰撞检测的<a href="https://baike.baidu.com/item/%E8%BD%BD%E6%B3%A2%E4%BE%A6%E5%90%AC?fromModule=lemma_inlink">载波侦听</a>多路访问，英文缩写成<a href="https://baike.baidu.com/item/CSMA%2FCD?fromModule=lemma_inlink">CSMA/CD</a>。</p>
<p>这种结构具有费用低、数据端用户入网灵活、站点或某个端用户失效不影响其它站点或端用户通信的优点。缺点是一次仅能一个端用户发送数据，其它端用户必须等待到获得发送权；媒体访问获取机制较复杂；维护难，分支节点故障查找难。尽管有上述一些缺点，但由于布线要求简单，扩充容易，端用户失效、增删不影响全网工作，所以是LAN技术中使用最普遍的一种。 </p>
<img src="./../images/网络设备/image-20240104132405468.png" alt="image-20240104132405468" style="zoom:67%;">



<h2 id="网关、交换机"><a href="#网关、交换机" class="headerlink" title="网关、交换机"></a>网关、交换机</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>网关（Gateway）:又称网间连接器、协议转换器。网关在传输层上以实现网络互联互通，是最复杂的网络互联设备，仅用于两个高层协议不同的网络互联。<ul>
<li>作用：它的作用就是对两个网络段中的使用不同传输协议的数据进行互相的翻译转换。在局域网里来说集线器就是网关，在二层网络里，交换机就是网关，在三层网络里路由就是网关。</li>
</ul>
</li>
<li>中继器（Repeater）：用于网络信号放大、调整的网络互联设备，能有效延长网络的连接长度。例如，PPI的正常传送距离不大于50m，经过中继器放大后，可传输超过1km；</li>
<li>路由器（Router，转发者）：所谓路由就是指通过相互连接的网络把信息从源地点移动到目标地点的活动。一般来说，在路由过程中，信息至少会经过一个或多个中间节点。路由器是互联网的主要节点设备。</li>
<li>交换机（Switch）:交换机是为了解决通信阻塞而设计的，它是一种基于MAC地址识别，能完成封装转发数据包功能的网络设备。交换机可以“学习”MAC地址，并把其存放在内部地址表中，通过在数据帧的始发者和目标接收者之间建立临时的交换路径，使数据帧直接由源地址到达目的地地址。</li>
<li>网桥（Bridge）:也叫桥接器，是连接两个局域网的一种存储/转发设备，它能将一个大的LAN分割为多个网段，或者将两个以上的LAN互联为一个逻辑LAN，使LAN上的所有用户都可以访问服务器。网桥将网络的多个网段在数据链路层连接起来。</li>
</ul>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>为处于网络中不同位置的设备之间实现数据互通。</p>
<blockquote>
<p>当一台路由器收到一个IP报文时，会在自己的路由表中执行路由查询，寻找匹配该报文目的IP地址的路由条目，如果找到匹配的路由条目，路由器便按照该条目所指示的出接口及下一跳IP地址转发该报文。</p>
</blockquote>
<h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>每一台支持路由功能的设备都需要维护路由表，可以理解为设备将报文转发到特定目的地所依据的一张“地图”。</p>
<img src="./../images/网络设备/image-20240104160820083.png" alt="image-20240104160820083" style="zoom: 80%;">

<p><strong>目的网络地址/网络掩码</strong></p>
<blockquote>
<p> 路由表相当于路由器的地图，目的网络地址及网络掩码用于标识一条路由</p>
</blockquote>
<p><strong>路由协议</strong></p>
<blockquote>
<p>表示该路由的协议类型，或者该路由通过什么途径学习到的</p>
<p>Statci：标识通过手工方式配置的静态路由</p>
</blockquote>
<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><code>VPN</code>：（Vitual Private Network）虚拟私有网络</p>
<p> 利用隧道协议（Tunneling Protocol）来达到发送端认证、消息保密与准确性等功能。</p>
<h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h3 id="按服务类型划分"><a href="#按服务类型划分" class="headerlink" title="按服务类型划分"></a>按服务类型划分</h3><p>基础设施即服务（Iaas）</p>
<blockquote>
<p>Infrastructure as a Service，提供底层计算、存储、网络资源，不负责后续操作系统、数据库、软件等安装，自由度最高。</p>
</blockquote>
<p>平台即服务（PaaS）</p>
<blockquote>
<p>Platform as a Service，提供底层底层计算、存储、网络资源并安装操作系统、数据库等，完成平台搭建工作，具体运行业务等不负责。</p>
</blockquote>
<p>软件即服务（SaaS）</p>
<blockquote>
<p>Software as a Service，提供包括资源、操作系统、软件等全套服务，包括云上所需要运行的业务等，自由度最低。</p>
</blockquote>
<p><img src="/./../images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/image-20240103110242798.png" alt="image-20240103110242798"></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/07/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li><p>Http将两台计算机视为不同的角色：客户端和服务器。客户端向服务器请求数据，服务器回应请求</p>
<span id="more"></span></li>
<li><p>Http为无状态协议，通过TCP建立到服务器的连接，当一次请求完成之后，会立即断开TCP连接，因此http是短连接。无状态是指：Http向服务器发起请求的时候，不是一直通过同一个连接发送请求，而是每一次请求都建立一个新的连接，不会记录任何客户端操作（见补充说明）</p>
</li>
<li><p>不管是客户端的请求信息还是服务器的回应信息，都带有一块头部信息（Header），头部信息是自定义的，用于传递额外信息（浏览器信息、请求的内容类型、相应的语言）</p>
</li>
</ul>
<blockquote>
<p>PS：</p>
<ol>
<li>HTTP/1.0:客户端的每次请求都要求建立一次单独的连接，在请求结束后会立即断开连接</li>
<li>HTTP/1.1:客户端的一次连接中可以处理多个请求，多个请求可以重叠进行，不需要等待一个请求结束再发送下一个请求</li>
<li><strong>HTTP是一种短连接，要保持客户端的在线状态，就需要每隔一段时间向服务器发送一次“保持连接”的请求，服务器在收到请求后也会对客户端回复，表明知道客户端“在线”。当服务器长时间未收到客户端的“保持连接”请求，则会认为客户端“下线”，客户端长时间无法收到服务器的回复，则认为网络已经断开</strong></li>
</ol>
</blockquote>
<h3 id="以实际应用看HTTP"><a href="#以实际应用看HTTP" class="headerlink" title="以实际应用看HTTP"></a>以实际应用看HTTP</h3><ul>
<li>TCP的主要作用就是用来建立连接，而传送数据还是交给了HTTP来完成</li>
<li>HTTP协议同样是一个请求、确认、连接的过程</li>
</ul>
<p>HTTP将传输数据的两边称为客户端（Client）和服务器（Server）</p>
<blockquote>
<p><strong>第一：发送一个http请求给S，这个请求包括请求头和请求内容</strong></p>
<p>request header：</p>
<ol>
<li><p>请求的方法：POST/GET</p>
</li>
<li><p>请求的URL，HTTP协议版本</p>
</li>
<li><p>请求的数据、编码方式</p>
</li>
<li><p>是否有Cookies，是否缓存</p>
<p>post和get请求方式的区别是，get把请求内容放在URL后面，但是URL长度有限制。而post是以表单的形势，适合要输入密码之类的，因为不在URL中显示，所以比较安全。</p>
</li>
</ol>
<p>request body：</p>
<p>即请求的内容.</p>
<p><strong>第二：S收到了http请求，然后根据请求头，返回http响应</strong></p>
<p>response header：</p>
<ol>
<li>cookies或session</li>
<li>状态码</li>
<li>内容大小</li>
</ol>
<p>response body：</p>
<p>   即响应的内容，包括，JS什么的。</p>
<p><strong>第三，C收到了以后，就由浏览器完成一系列的渲染，包括执行JS脚本等</strong></p>
</blockquote>
<p>参考文章：<a href="https://www.cnblogs.com/baizhanshi/p/8482612.html">https://www.cnblogs.com/baizhanshi/p/8482612.html</a></p>
<h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>TCP是一种可靠协议，必须要成功建立连接后才能够传输数据，有超时重传机制</li>
<li>UDP是一种面向无连接，不可靠的协议，不需要建立连接即可传输数据，可以直接发送信息报文，尽最大努力将数据传输，但是不保证传输结果</li>
<li>TCP传输数据慢，建立连接、超时重传、拥塞机制都会消耗时间，比较占用系统资源，且由于三次握手机制，导致TCP容易被攻击</li>
<li>UDP传输数据快，且由于是无状态传输，没有TCP的机制，被利用的漏洞更少，反而更加安全，但是用UDP传输数据无法保证数据可达，容易发生丢包</li>
<li>TCP和UDP是两种独立的协议，因此各自的端口号也相互独立</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><strong>TCP应用场景</strong><br>当对网络通信质量有要求时，比如：整个数据要准确无误的传递给对方，这往往对于一些要求可靠的应用，比如HTTP,HTTPS,FTP等传输文件的协议，POP,SMTP等邮件的传输协议。常见使用TCP协议的应用：</p>
<ol>
<li>浏览器使用的：HTTP</li>
<li>FlashFXP:FTP</li>
<li>Outlook:POP，SMTP</li>
<li>QQ文件传输</li>
</ol>
<p><strong>UDP 应用场景</strong><br>对当前网络通讯质量要求不高的时候，要求网络通讯速度尽量的快，这时就使用UDP<br>日常生活中常见使用UDP协议：</p>
<ol>
<li>QQ语音</li>
<li>QQ视频</li>
<li>TFTP</li>
</ol>
<p><strong>TCP的三次握手即建立了一次连接，四次挥手则为断开一次连接</strong></p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>所谓的端口，就好像是门牌号一样，<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>可以通过ip地址找到对应的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/3369401">服务器端</a>，但是服务器端是有很多端口的，每个<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号</p>
<blockquote>
<p><strong>端口分为物理端口和逻辑端口，这里主要论述逻辑端口</strong></p>
</blockquote>
<h3 id="周知端口"><a href="#周知端口" class="headerlink" title="周知端口"></a>周知端口</h3><p>众所周知的端口，范围从0-1023。</p>
<p>如：访问<a href="http://www.baidu.com,是不必指定端口号的,因为www的默认端口号为80/">www.baidu.com，是不必指定端口号的，因为www的默认端口号为80</a></p>
<p>如果使用非默认端口号去访问，则需要在地址后面加上对应的端口号</p>
<p><strong>常见端口号：</strong></p>
<p>21端口：FTP 文件传输服务<br>22端口：SSH 远程连接服务<br>23端口：TELNET 终端仿真服务<br>25端口：SMTP 简单邮件传输服务<br>53端口：DNS 域名解析服务<br>80端口：HTTP 超文本传输服务<br>443端口：HTTPS 加密的超文本传输服务</p>
<p>3306端口：MYSQL数据库端口<br>5432端口：PostgreSQL数据库端口<br>6379端口：Redis数据库端口<br>8080端口：TCP服务端默认端口<br>8888端口：Nginx服务器的端口<br>9200端口：Elasticsearch服务器端口<br>27017端口：mongoDB数据库默认端口<br>22122端口：fastdfs服务器默认端口</p>
<blockquote>
<p>查看端口状态：</p>
<p>netstat -an</p>
</blockquote>
<h3 id="动态端口"><a href="#动态端口" class="headerlink" title="动态端口"></a>动态端口</h3><p>动态端口的范围是从1024-65535。一般不固定分配某种服务，而是动态分配，当一个系统进程或者应用程序进程需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它临时使用，当进程关闭时，同时也释放所占用的端口号。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试</title>
    <url>/2023/12/25/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="关键名词"><a href="#关键名词" class="headerlink" title="关键名词"></a>关键名词</h3><p><code>系统吞吐量</code>：单位时间内系统能处理的请求数量</p>
<p><code>并发数</code>：系统同时能处理的请求数量</p>
<p><code>响应时间</code>：执行一个请求从开始到最后收到响应数据所花费的总时间</p>
<p><code>TPS</code>：每秒事务数</p>
<p><code>QPS</code>：每秒查询数</p>
<p><code>HPS</code>：每秒HTTP请求数</p>
<p>TPS（QPS） = 并发数/平均响应时间</p>
<span id="more"></span>

<h3 id="吞吐量与并发数"><a href="#吞吐量与并发数" class="headerlink" title="吞吐量与并发数"></a>吞吐量与并发数</h3><blockquote>
<p>在系统的设计范围之内，吞吐量随系统的并发用户数的增加呈现增加趋势</p>
<p>当超出系统设计范围后，分为两种情况</p>
<ul>
<li>系统设置有请求处理上限，超过限制后并发用户数增多，吞吐量不会再增加，呈现为一条水平线</li>
<li>系统未设置请求处理上限，不断接收请求，最后随着请求过多导致吞吐量下降或者系统崩溃</li>
</ul>
</blockquote>
<p>平均并发用户数的计算：C=nL / T</p>
<p>其中C是平均的并发用户数，n是平均每天访问用户数，L是一天内用户从登录到退出的平均时间（操作平均时间），T是考察时间长度（一天内多长时间有用户使用系统）</p>
<p>并发用户数峰值计算： C^约等于C + 3*根号C 其中C^是并发用户峰值，C是平均并发用户数，该公式遵循泊松分布理论。</p>
<p>吞吐量计算：当没有遇到性能瓶颈的时候，吞吐量与虚拟用户数之间存在一定的联系，可以采用以下公式计算：F=VU * R / T其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间，其实通过这个公式就能看出吞吐量与并发用户数之间的关系了（这里的VU就是我们用工具模拟的并发用户数）。</p>
<h3 id="并发数、QPS、平均响应时间三者之间关系"><a href="#并发数、QPS、平均响应时间三者之间关系" class="headerlink" title="并发数、QPS、平均响应时间三者之间关系"></a><strong>并发数、QPS、平均响应时间三者之间关系</strong></h3><p><img src="/../images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/image-20231228152933058.png" alt="image-20231228152933058"></p>
<p>参考链接：<a href="https://www.cnblogs.com/111testing/p/11402799.html">性能测试指标：TPS，吞吐量，并发数，响应时间 - 清风软件测试开发 - 博客园 (cnblogs.com)</a></p>
<h3 id="LoadRunner简单使用"><a href="#LoadRunner简单使用" class="headerlink" title="LoadRunner简单使用"></a>LoadRunner简单使用</h3><h4 id="LoadRunner负载测试的流程是什么？"><a href="#LoadRunner负载测试的流程是什么？" class="headerlink" title="LoadRunner负载测试的流程是什么？"></a>LoadRunner负载测试的流程是什么？</h4><ol>
<li>Plan the load test <strong>计划负载测试</strong></li>
<li>Create Vuser scripts <strong>创建脚本</strong></li>
<li>Define the scenario <strong>定义场景</strong></li>
<li>Analyze the results <strong>分析结果</strong></li>
</ol>
<h4 id="配置服务器地址"><a href="#配置服务器地址" class="headerlink" title="配置服务器地址"></a>配置服务器地址</h4><ol>
<li><p>找到Loadrunner安装路径下的WebTours配置文件</p>
<p><img src="/../images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/image-20231228153435162.png" alt="image-20231228153435162"></p>
</li>
<li><p>找到ServerName，并删除注释，使得注释生效</p>
<img src="../images/软件测试/image-20231228161931098.png" alt="image-20231228161931098" style="zoom: 67%;"></li>
<li><p>重启Start HP Web Tours Server（显示下图为成功启动服务器）</p>
<img src="../images/软件测试/image-20231228153618225.png" alt="image-20231228153618225" style="zoom:50%;"></li>
<li><p>访问此网页<a href="http://localhost:1080/WebTours/index.htm">Web Tours</a>或者打开HP Web Tours Application</p>
<blockquote>
<p>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\HP Software\HP LoadRunner\Samples\Web\HP Web Tours Application</p>
</blockquote>
</li>
</ol>
<h4 id="VuGen"><a href="#VuGen" class="headerlink" title="VuGen"></a>VuGen</h4><h5 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h5><p>vuser_init：初始化</p>
<p>Action：具体操作（主体）</p>
<p>vuser_end：结束（释放资源）</p>
<p>插入事务（Transaction）</p>
<blockquote>
<p>Loadrunner执行到事务点时会开始计时，直到运行到事务的结束点，后续分析其执行的时间等信息</p>
</blockquote>
<p>插入集合点</p>
<blockquote>
<p>加重负载，模拟多个用户在同一时间执行同一个操作</p>
</blockquote>
<p>模拟用户思考时间</p>
<blockquote>
<p>用户在执行两个连续操作期间等待的时间称为“思考时间”</p>
</blockquote>
<p>参数化</p>
<blockquote>
<p>将常量设置为变量，设置完成后可在参数列表中修改具体的变量值</p>
<p>变量值可根据迭代进行切换（顺序、随机、唯一等）</p>
<p>支持数据库导入，需要odbc数据源</p>
</blockquote>
<p>插入文本/图像检查点</p>
<blockquote>
<p>需在运行设置中提前启用</p>
<p>将视图切换到树视图，检查返回的结果是否正确</p>
<p>可搜索界面中存在的元素来判断</p>
</blockquote>
<h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><h5 id="全局计划"><a href="#全局计划" class="headerlink" title="全局计划"></a>全局计划</h5><blockquote>
<p>模拟实际场景情况，进行加压或减压</p>
</blockquote>
<ul>
<li>初始化</li>
<li>启动Vuser</li>
<li>持续时间</li>
<li>停止Vuser</li>
</ul>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><ol>
<li><p>确定业务场景</p>
</li>
<li><p>分析业务流程（可通过画流程图、泳道图辅助分析）</p>
<p>流程总路径数=判定节点数（菱形）+1</p>
</li>
<li><p>根据路径编写测试场景——测试点</p>
</li>
<li><p>按照测试点编写测试用例</p>
<p><img src="/../images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/image-20231228153653249.png" alt="image-20231228153653249"></p>
</li>
</ol>
<blockquote>
<p><strong>流程图</strong>（场景较为简单，涉及单个用户情况）</p>
<p>业务场景：</p>
<p>①入口：首页点击+号进入视频拍摄<br>②视频类型：日常视频仅一天可见/作品视频永久可见</p>
<img src="../images/软件测试/image-20231228145633404.png" alt="image-20231228145633404" style="zoom: 67%;">

<p><strong>泳道图</strong>（场景涉及多个用户情况）</p>
<p>业务场景：</p>
<p>①普通用户发起退款申请</p>
<p>②商家进行审核，审核通过进行退款，审核不通过拒绝退款，退款成功<a href="https://www.zhihu.com/search?q=%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2962583197%7D">用户账户</a>收到退款项，售后</p>
<p>详情显示已退款</p>
<p>③商家拒绝退款后，用户确认售后结果，退款流程结束，售后详情显示已结束。</p>
<p>④商家拒绝退款后，用户可以向平台申诉，平台审核后可根据实际情况决定退全款/部分退款/拒绝退款，平台结果为终审结果。</p>
<img src="../images/软件测试/image-20231228145801962.png" alt="image-20231228145801962" style="zoom:67%;">
</blockquote>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>商用密码</title>
    <url>/2024/01/05/%E5%95%86%E7%94%A8%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="商用密码"><a href="#商用密码" class="headerlink" title="商用密码"></a>商用密码</h1><h2 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h2><p>机密性</p>
<blockquote>
<p>保证信息不被泄露给非授权实体的性质</p>
</blockquote>
<p>数据完整性</p>
<blockquote>
<p>数据没有遭受以非授权方式所作的改变的性质</p>
</blockquote>
<p>不可否认性</p>
<blockquote>
<p>证明一个已经发生的操作行为无法否认的性质</p>
</blockquote>
<p>加密</p>
<blockquote>
<p>对数据进行密码变换以产生密文的过程</p>
</blockquote>
<p>密钥</p>
<blockquote>
<p>控制密码算法运算的关键信息或参数</p>
</blockquote>
<p>消息鉴别码（MAC）</p>
<blockquote>
<p>利用对称密码技术或密码杂凑技术，在秘密密钥参与下，由消息所导出的数据项。任何持有这一秘密密钥的实体，可利用消息鉴别码检查消息的完整性和始发者身份</p>
</blockquote>
<p>机密性技术要求保护对象</p>
<blockquote>
<p>使用密码技术的加解密功能实现机密性</p>
</blockquote>
<ol>
<li>身份鉴别信息</li>
<li>密钥数据</li>
<li>传输的重要数据</li>
<li>信息系统应用中所有存储的重要数据</li>
</ol>
<p>完整性技术要求保护对象</p>
<blockquote>
<p>使用基于对称密码算法或密码杂凑算法的消息鉴别码机制、基于公钥密码算法的数字签名机制等密码技术实现完整性</p>
</blockquote>
<ol>
<li>身份鉴别信息</li>
<li>密钥数据</li>
<li>日志记录</li>
<li>访问控制信息</li>
<li>重要信息资源安全标记</li>
<li>重要可执行程序</li>
<li>视频监控音像记录</li>
<li>电子门禁系统进出记录</li>
<li>传输的重要数据</li>
<li>信息系统应用中所有存储的重要数据</li>
</ol>
<h2 id="密评等级"><a href="#密评等级" class="headerlink" title="密评等级"></a>密评等级</h2><p>密评等级与等保等级保持一致</p>
<blockquote>
<p>未完成网络安全等级保护定级的系统，以拟定等级开展密评；无拟定等级的系统，密码应用等级至少为第三级</p>
<p>被测系统有高安全保护需求或高安全标准等特殊情况，信息系统的密码应用等级可以高于等保定级</p>
</blockquote>
<span id="more"></span>

<h2 id="测评力度"><a href="#测评力度" class="headerlink" title="测评力度"></a>测评力度</h2><p>主要通过指标中“应”、“宜“、”可“进行区分</p>
<p>“应”表示应该、只准许；</p>
<p>“宜”表示推荐、建议；</p>
<p>“可”表示可以、允许；</p>
<blockquote>
<ol>
<li>若信息系统未编制密码应用方案或在方案中未对“宜”的指标要求做明确说明，则“宜”的指标要求纳入标准符合性测评范围。</li>
<li>若信息系统编制了密码应用方案，且方案通过评估，方案中明确了不适用的“宜”的指标要求项，且有对应的风险控制措施说明的情况下。密评人员在测评时，应根据信息系统的密码应用方案和方案评估报告/评审意见，核实方案中的不适用指标要求项所采用的风险控制措施的适用条件，在实际的信息系统中是否被满足，且信息系统的实施情况与方案中所描述的风险控制措施是否一致，若满足适用条件，该测评指标为“不适用”；若不满足适用条件，则应纳入标准符合性测评范围，进行测评和结果判定。</li>
</ol>
</blockquote>
<h3 id="动态令牌基本原理"><a href="#动态令牌基本原理" class="headerlink" title="动态令牌基本原理"></a>动态令牌基本原理</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>OTP</code> 是 One-Time Password的简写，表示一次性密码。</p>
<p><code>HOTP</code> 是HMAC-based One-Time Password的简写，表示基于HMAC算法加密的一次性密码。</p>
<blockquote>
<p>事件同步，通过某一特定的事件次序及相同的种子值作为输入，通过HASH算法运算出一致的密码。</p>
</blockquote>
<p><code>TOTP</code> 是Time-based One-Time Password的简写，表示基于时间戳算法的一次性密码。 </p>
<blockquote>
<p>时间同步，基于客户端的动态口令和动态口令验证服务器的时间比对，一般每60秒产生一个新口令，要求客户端和服务器能够十分精确的保持正确的时钟，客户端和服务端基于时间计算的动态口令才能一致。</p>
</blockquote>
<h4 id="OTP基本原理"><a href="#OTP基本原理" class="headerlink" title="OTP基本原理"></a>OTP基本原理</h4><p>公式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OTP(K,C)  =  Truncate(HMAC-SHA-1(K,C))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>K表示秘钥串；</p>
<p>C是一个数字，表示随机数；</p>
<p>HMAC-SHA-1表示使用SHA-1做HMAC(基于hash算法的MAC，MAC为消息认证码）；</p>
<p>Truncate是一个函数，就是怎么截取加密后的串，并取加密后串的哪些字段组成一个数字。</p>
<p>对HMAC-SHA-1方式加密来说，Truncate实现如下。</p>
<p>HMAC-SHA-1加密后的长度得到一个20字节的密串；<br>取这个20字节的密串的最后一个字节，取这字节的低4位，作为截取加密串的下标偏移量；<br>按照下标偏移量开始，获取4个字节，按照大端方式组成一个整数；<br>截取这个整数的后6位或者8位转成字符串返回。</p>
<p>PS:</p>
<p>大端方式：数据的高字节部分保存在低地址</p>
<p>小端方式：数据的低字节部分保存在高地址</p>
</blockquote>
<p>HOTP与TOTP原理与OTP一致</p>
<ul>
<li><p>HOTP将C替换为随机数，即为一个参数，获取动态密码</p>
</li>
<li><p>TOTP将C替换为由时间戳产生的数字，C是由时间戳计算得出</p>
<ul>
<li><pre><code>C = (T - T0) / X
#T表示当前Unix时间戳，T0一般取值为0，X表示时间步数，即是时间间隔，默认为30秒
</code></pre>
</li>
</ul>
</li>
</ul>
<p>参考链接<a href="https://blog.csdn.net/JENREY/article/details/135315479">动态令牌的原理(OTP &amp; HOTP &amp;TOTP)-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据安全风险评估办法</title>
    <url>/2024/01/09/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据保密性、完整性、可用性、数据处理合理性角度分析各项风险源可能引发的数据安全风险</p>
<span id="more"></span>

<h2 id="数据处理者与数据控制者"><a href="#数据处理者与数据控制者" class="headerlink" title="数据处理者与数据控制者"></a>数据处理者与数据控制者</h2><h3 id="数据处理者"><a href="#数据处理者" class="headerlink" title="数据处理者"></a>数据处理者</h3><p><strong>定义</strong></p>
<p>代表数据控制者来处理个人数据</p>
<h3 id="数据控制者"><a href="#数据控制者" class="headerlink" title="数据控制者"></a>数据控制者</h3><p><strong>定义</strong></p>
<p>决定数据处理的目的和方式的自然人、法人、公共机构或其他实体</p>
<h2 id="数据安全风险评估原理"><a href="#数据安全风险评估原理" class="headerlink" title="数据安全风险评估原理"></a>数据安全风险评估原理</h2><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0%E5%8A%9E%E6%B3%95/image-20240109134642107.png" alt="image-20240109134642107"></p>
<ol>
<li><p>风险识别</p>
</li>
<li><p>风险归类分析</p>
<blockquote>
<p>分析风险类型、风险源、涉及到的数据及类型、涉及到的数据处理活动</p>
</blockquote>
</li>
<li><p>危害程度分析或发生可能性分析</p>
<blockquote>
<p>危害程度分析：根据数据价值和风险源严重程度分析，根据影响的主体划分等级：国家安全、社会秩序、组织或个人利益</p>
<p>发生可能性分析：风险源发生频率、安全措施有效性和完备性、风险源关联性</p>
</blockquote>
</li>
<li><p>数据安全风险逐项评价</p>
<blockquote>
<p>分析可能存在的安全风险等级，分为重大、高、中、低、轻微安全风险</p>
</blockquote>
</li>
</ol>
<h2 id="风险识别"><a href="#风险识别" class="headerlink" title="风险识别"></a>风险识别</h2><ul>
<li>数据收集安全<ul>
<li>数据收集合法正当性、通过第三方收集数据安全、数据质量控制、数据收集方式、数据收集设备 及环境安全</li>
</ul>
</li>
<li>数据存储安全<ul>
<li>数据存储适当性、逻辑存储安全、存储介质安全</li>
</ul>
</li>
<li>数据传输安全<ul>
<li>传输链路安全性、传输链路可靠性</li>
</ul>
</li>
<li>数据使用和加工安全<ul>
<li>数据使用和加工合法性、数据正当使用、数据导入导出、数据处理环境、数据使用和加工安全措施</li>
</ul>
</li>
<li>数据提供安全<ul>
<li>数据提供合法正当必要性、数据提供管理、数据提供技术措、数据接收方、数据转移安全、数据出境安全</li>
</ul>
</li>
<li>数据公开安全<ul>
<li>数据公开适当性、数据公开管理</li>
</ul>
</li>
<li>数据删除安全<ul>
<li>数据删除管理、存储介质销毁</li>
</ul>
</li>
<li>其他数据处理活动安全<ul>
<li>主要针对即时通信、快递物流、网上购物、网络支付、网络音视频、汽车、网络预约汽车服务等数据处理活动</li>
</ul>
</li>
</ul>
<h2 id="风险归类分析"><a href="#风险归类分析" class="headerlink" title="风险归类分析"></a>风险归类分析</h2><ul>
<li>风险类型：数据泄露风险等</li>
<li>风险描述</li>
<li>风险源描述</li>
<li>涉及的数据及类型</li>
<li>涉及到数据处理活动：数据收集、存储、使用和加工</li>
</ul>
<h2 id="风险危害程序分析"><a href="#风险危害程序分析" class="headerlink" title="风险危害程序分析"></a>风险危害程序分析</h2><ul>
<li>数据价值</li>
<li>风险源严重程度</li>
</ul>
<blockquote>
<p>结合数据级别、规模、种类、处理目的、方式、范围等情况，分析数据安全风险发生后将会导致的危害程度</p>
</blockquote>
<h3 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h3><ol>
<li><p>数据价值从数据分级、经济效益、业务效益、投入成本计量等方面分析。</p>
<blockquote>
<p>个人信息规模和数据敏感程度可以作为数据价值判断的衡量因素</p>
</blockquote>
</li>
<li><p>风险源严重程度，主要考虑风险源对数据处理者带来的危害程度。</p>
</li>
</ol>
<p><img src="/./../images/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0%E5%8A%9E%E6%B3%95/image-20240109133456078.png" alt="image-20240109133456078"></p>
<h2 id="风险发生可能性分析"><a href="#风险发生可能性分析" class="headerlink" title="风险发生可能性分析"></a>风险发生可能性分析</h2><p>风险源发生频率</p>
<blockquote>
<p>被评估对象发生相关数据安全事件的次数及频率、同行业或业务模式相似的单位发生相关数据安全事件的次数及频率等</p>
</blockquote>
<p>安全措施有效性和完备性</p>
<blockquote>
<p>数据安全措施应对风险源的有效性、全面性</p>
</blockquote>
<p>风险源关联性</p>
<blockquote>
<p>风险源清单关联分析，发现多个风险源组合后可能引发的数据安全风险，判断风险发生可能性</p>
</blockquote>
<p>将可能性分为低、中、高3个级别，等级越高代表措施完备性、有效性越低，风险越可能发生</p>
<table>
<thead>
<tr>
<th>等级</th>
<th>风险发生可能性描述</th>
</tr>
</thead>
<tbody><tr>
<td>高</td>
<td>涉及违法违规行为、缺少数据安全措施或安全措施有效性较弱，被评估方已经发生或在通常条件下会发生。本单位、国内相同或相似业务模式的单位多次高频发生同类安全事件，或容易与其他风险源结合引发风险，</td>
</tr>
<tr>
<td>中</td>
<td>数据安全风险事件发生的可能性一般。或有一定数据安全措施，但有效性不足，被评估对象在一定条件下会发生，本单位、国内相同或相似业务模式的单位发生相关风险源，或有一定概率与其他风险源结合引发风险，</td>
</tr>
<tr>
<td>低</td>
<td>数据安全措施完备、有效，被评估对象或同类组织很少或在较苛刻条件下才会发生相关风险事件，或很难与其他风险源结合引发风险，风险隐患发生可能性低（例如几乎不可能发生，或仅可能在非常罕见和例外的情况下发生）。</td>
</tr>
</tbody></table>
<h2 id="数据安全风险评价"><a href="#数据安全风险评价" class="headerlink" title="数据安全风险评价"></a>数据安全风险评价</h2><p>重大安全风险：可能直接影响国家安全</p>
<p>高安全风险：可能直接影响经济运行、社会稳定、公共健康安全，以及较为广泛的公众权益，或对国家安全造成间接影响</p>
<p>中安全风险：可能直接对企业合法权限造成较为严重的影响</p>
<p>低安全风险：可能直接对企业合法权益造成一般影响</p>
<p>轻微安全风险：可能直接对企业合法权益造成一半或较小影响</p>
<p><img src="/./../images/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AF%84%E4%BC%B0%E5%8A%9E%E6%B3%95/17efadfa90bd2fe076c0e4858e5c558.jpg" alt="17efadfa90bd2fe076c0e4858e5c558"></p>
<h2 id="风险处置建议"><a href="#风险处置建议" class="headerlink" title="风险处置建议"></a>风险处置建议</h2><ul>
<li>停止收集某些类型数据</li>
<li>预处理阶段对某些类型数据进行销毁。</li>
<li>缩小处理范围。</li>
<li>缩短存储期限。</li>
<li>采取额外的技术措施。</li>
<li>加强对应数据处理活动岗位人员培训。</li>
<li>匿名化、去标识化。</li>
<li>完善管理制度。</li>
<li>采用其他数据处理技术。</li>
<li>补充签署协议（针对数据转移）。</li>
<li>修订隐私条款。</li>
</ul>
]]></content>
      <tags>
        <tag>政策法规</tag>
      </tags>
  </entry>
</search>
